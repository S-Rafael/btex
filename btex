#!/bin/bash

        ###     This program is used to compile latex files       ###
        #                                       -ppurka             #
        #-----------------------------------------------------------#

        #----------------- License: GPL-3 or later -----------------#
        # Copyright (C) 2007 - 2011  P. Purkayastha                 #
        # Contact: ppurka _at_ gmail _dot_ com                      #
        # This program comes with ABSOLUTELY NO WARRANTY;           #
        # This is free software, and you are welcome to redistribute#
        # it under certain conditions;                              #
        #                                                           #
        # For a brief summary of the license see the file COPYING   #
        # that is distributed with this program.                    #
        #                                                           #
        # For the full text of the license see                      #
        # http://www.gnu.org/licenses/gpl-3.0.html                  #
        #-----------------------------------------------------------#

        ###                     Changelog                         ###
        # 10/06/2013    Parse short option commands as getopt does. #
        #               Therefore, -ar and -nc are not available.   #
        #               Raise an error on invalid dvips paper opts. #
        # 12/25/2011    More silent output from bibtex.             #
        #               More documentation and contact information. #
        # 12/23/2011    Bugfix: Fix detection of bibtex.            #
        # 06/18/2011    Bugfix: Quote xterm command properly && exec#
        # 05/20/2011    Bugfix: add 0 to return in clean_files      #
        # 04/06/2011    Bugfix: fix display of dvi/pdf key bindings #
        # 02/04/2011    - Ensure all variables are quoted where reqd#
        #               - Almost all config var are monkey-proof now#
        #               - Fix help text for -c (it now includes -w) #
        #               - Rearrange set_xdvi() to after until[[ ]]  #
        #               - Enable setting default MODE in config file#
        #               - Autocompile mode is much simplified now   #
        #               - Change option -a to enable autocompile and#
        #               add -ar for adobe reader (acroread)         #
        #               - clean_files gives verbose output if Silent#
        #               mode is disabled (i.e. $SILENT = 0 mod 3 )  #
        #               Bugfix: run clean_files if RECURSIVE is 0   #
        #               Bugfix: robust checks on POLLED_AUTOCOMPILE #
        #               Bugfix: POLLED_AUTOCOMPILE apparently had no#
        #               support for -A command line. And make it    #
        #               exit properly if Ctrl-C is pressed.         #
        # 01/31/2011    Bugfix: Trap wasn't working properly. Fix   #
        # 01/30/2011    Many new features:                          #
        #               - Add option -w to disable warnings         #
        #               - Use prime numbers to indicate SILENT mode #
        #               since this leads to much cleaner code       #
        #               - Add option -C for cleaning temporary latex#
        #               files and config option CLEAN_FILES         #
        #               - Infinite autocompile mode. Activate it by #
        #               giving 0 as the input                       #
        #               - Allow to exit autocompile mode & continue #
        #               with the script by pressing Ctrl-C. However #
        #               if Ctrl-C is pressed outside of autocompile #
        #               mode, then the script exits                 #
        #               - Add help text on autocompile              #
        #               Bugfix: Enable silent mode was enabling o/p #
        #               of warnings if no-interaction and nowarning #
        #               were enabled                                #
        # 09/14/2010    Reorder filename to before space check. This#
        #               allows *directories* with spaces to be used.#
        #               Auto-detect bibtex. It was long time todo :)#
        # 03/30/2010    Change to ps2pdf from epstopdf so that pdf  #
        #               files with embedded fonts can be created    #
        # 03/11/2010    Enable support for index in latex file      #
        # 02/22/2010    Fix detection of errors when multiple latex #
        #               files are being compiled.                   #
        # 02/20/2010    Rearrange the functions so that it is easier#
        #               to locate them.                             #
        #               Fix bibliography detection when it is not   #
        #               present in the main file. This is still not #
        #               quite complete.                             #
        # 01/18/2010    Updated help text to remove xpdf.           #
        #               Fixed btex_editor="custom" to not warn.     #
        #               Fixed switching on/off inv. search with some#
        #               editor other than gvim.                     #
        # 12/20/2009    Added option -A to allow one to check status#
        #               of all .tex files in current dir by inotify-#
        #               wait. This allows one to have \include in   #
        #               main file and still have autocompile working#
        # 10/11/2009    Fixed a bug with a stray $DELAY remaining.  #
        # 07/21/2009    Added support for polled autocompile mode!  #
        #               This had been on the TODO for months!       #
        # 07/15/2009    Added support for editors other than gvim   #
        #               Fixed bugs in set_xdvi and in enabling of   #
        #               inverse search.                             #
        #               Fixed some errors in help text.             #
        # 07/13/2009    Much better sed expressions. Also fixed a   #
        #               misinformation in the help text. Finally,   #
        #               added possibility of passing additional opts#
        #               to (pdf)latex and set PAPER type in config  #
        #               Now, we o/p which # of compile is running   #
        # 07/11/2009    Added an INOTIFY_DELAY to take care of 'file#
        #               not found' errors.                          #
        # 06/24/2009    Abstracted out latex and pdflatex commands  #
        #               Changed text in menu so that it is clear    #
        #               what viewer is tied to which file format    #
        #               This reduces ambiguity of commands in the   #
        #               case where the same viewer is used for all  #
        #               or a multiple number of the file formats    #
        # 02/21/2009    Enabled autodetection of bibliography in tex#
        #               file. This not quite complete and checks for#
        #               specific strings in the latex file.         #
        #               Need to do bibtex and other biblio options  #
        # 11/17/2008    Enabled autodetection of beamer in tex file #
        #               Also, changed menu to show enable/disable   #
        #               instead of the generic 'toggle'             #
        # 10/20/2008    Enabled both ps generation as well as pdf   #
        #               generation via pdflatex using one command   #
        #               There is also a command line switch for it  #
        # 10/11/2008    Some warnings if pdf/ps/dvi files are older #
        #               than the latex file                         #
        #               Use config file for *VIEWER* options        #
        # 09/28/2008    Added -watchfile 1 option to xdvi. A new    #
        #               variable DVI_VIEWER_OPTIONS takes care of   #
        #               these additional options                    #
        #               Also introduced P{S,DF}_VIEWER_OPTIONS      #
        # 06/02/2008    Cleanups. Now the menu changes depending on #
        #               the options that are available              #
        # 05/30/2008    Support for -interaction=nonstopmode w/ or  #
        #               without colored output for errors as well   #
        #               as warnings                                 #
        #               Renamed quiet to silent to better match w/  #
        #               the menu options                            #
        # 04/21/2008    Support for bibtex, slight reorganization   #
        # 03/31/2008    Enabled inverse search for all latex files  #
        #               through the -src-specials command option    #
        #               This means that srcltx is not reqd. now     #
        #               Rewrote help and provided command line opt. #
        # 02/28/2008    Fixed bugs in set_xdvi which was being used #
        #               to enable inverse search in xdvi            #
        #               Fixed bugs in autocompile WAITTIME          #
        #               Disabled autocompile option if inotifywait  #
        #               is not available                            #
        # 02/26/2008    Enabled inverse search through xdvi & gvim  #
        # 12/30/2007    Code rearrangement and                      #
        #               FULL autocompile mode! :D                   #
        # 12/25/2007    Allow one to execute it by clicking on the  #
        #               file in rox                                 #
        #               Better help text                            #
        # 12/20/2007    Amazing article online enables me to get    #
        #               the status of each part of a pipe, so now   #
        #               error checking works very nice even with    #
        #               the grep command (in SILENT mode)           #
        # 11/24/2007    Rudimentary autocompile mode                #
        # 11/20/2007    Pretty output :P                            #
        #               New pattern for grep to capture more errors #
        # 10/10/2007    Enabled a silent mode (reduces junk o/p)    #
        #               Enabled Toggling the silent mode            #
        #               Reorganized menu and help text              #
        # 04/28/2007    Enabled method to convert ps to pdf         #
        # 02/??/2007    Enabled an option to support beamer         #
        # 01/??/2007    Enabled a "non-stop" mode                   #
        # <=01/01/2007  Umpteen number of untracked changes         #
        #  early 2006?  First version of the script                 #
        #-----------------------------------------------------------#

        ###                         TODO (21/25/2011)             ###
        # Bibliography: Check for other means of calling biblio     #
        #               Check for \input{file} and check file for   #
        #               bibliography content -- Partially done      #
        # Bibtex:       Check for bibtex autodetection              #
        #               Also, need to look for \input{file}, etc    #
        #-----------------------------------------------------------#

. `which my_bash_functions 2> /dev/null` || {
    echo -e " \x1b[1;31mError!\x1b[0m The script \x1b[1;32mmy_bash_functions\
\x1b[0m was not found in your \$PATH
        Please ensure that the script is available and executable"
    exit 1
}

# Source the readfilename
. `which my_read_files 2> /dev/null` || {
    echo -e " \x1b[1;31mError!\x1b[0m The script \x1b[1;32mmy_read_files\
\x1b[0m was not found in your \$PATH
        Please ensure that the script is available and executable"
    exit 1
}

# Some functions needed at the very beginning {{{
# check <program name> [info|Err|die] [<*_VIEWER>]
# If *_VIEWER is present in argument then it must be $3
check() {
    local INFO=die
    local exe="$(which "${1}" 2>/dev/null)"
    [[ "${2}" ]] && INFO="${2}"
    if [[ ! -x "$exe" && "${3}" ]]; then
        $INFO "You don't seem to have $bold$1$normal installed.
    Modify $blue$config_dir/$config_file$normal with the correct ${3%_*} viewer"
        return 1
    elif [[ ! -x "$exe" ]]; then
        $INFO "You don't seem to have $bold$1$normal installed."
        return 1
    fi
    CHECKED="$exe"
    return 0
}

# Usage: check_dvips_paper_options <paper>
check_dvips_paper_options() {
    case "$1" in
        a3|a4|landscape|ledger|legal|letter) ;;
        *)  die "$red$1$normal: Invalid dvips paper option!
    Valid options are: a3, a4, landscape, ledger, legal, letter." ;;
    esac
}

# Help me!!
help() {
    echo
    echo -e " $yellow ${self}:$normal"
    case "$1" in
        "autocompile")  info "${bold}Autocompile:$normal
    In the autocompile mode, the script waits for the tex file to change
    and once it changes, the script compiles the file.

    The autocompile mode can be enabled if you have inotifywait installed
    or if you have enabled ${bold}POLLED_AUTOCOMPILE$normal in the config
    file. Otherwise the menu option is not shown.  To enable autocompile
    mode, press ${bold}a$normal at the menu. The script will wait
    indefinitely for a modification in the tex file(s).

    Pressing ${bold}Ctrl-C$normal while in autocompile mode, exits the
    autocompile mode and continues with the rest of the script. But
    pressing ${bold}Ctrl-C$normal outside the autocompile mode, simply
    exits the script.

    If you want the script to watch for changes in all the tex files in the
    directory, then pass the -A argument to $yellow${self}$normal
    "
        return ;;
        "editor")       info "${bold}Editor:$normal
    If you have set your dvi viewer to xdvi, then this script supports
    enabling inverse search in xdvi.
    The editors which are automatically configured to work with the inverse
    search of xdvi are any of the vim/gvim variant.

    You can set the editor permanently in $blue$config_dir/$config_file$normal
    by setting the ${bold}btex_editor$normal variable.
    You can temporarily set some vim/gvim variant other than the one set in
    the config file by using the --editor argument to $yellow${self}$normal

    If you want inverse search with some other editor, then do the following:
    - Create your own script named:
      $green$config_dir/btex_custom_editor$normal
    - Ensure that the only output of the script is the editor command that
      is to be passed to xdvi.
    - Set ${bold}btex_editor=custom$normal in:
      $blue$config_dir/$config_file$normal
    "
        return ;;
        "inv-search")   info "${bold}Inverse search:$normal
    - Inverse search is the feature by which one can access the
      corresponding line in an editor by clicking in the viewer (used to
      view the latex output).
    - In this script, inverse search feature can be used if one is using
      gvim and the tex file is open in a gvim editor. The script
      automatically determines the correct gvim if multiple gvims are running.
    - The dvi viewer which is automatically set up by this script is xdvi.
      Other dvi viewers will need to be configured separately.
    - If you use okular, then inverse search may be possible even in
      pdf files. Search Google for pdfsync and okular.
      "
        return ;;
    esac

    info "This program is used to compile latex files and output ps/pdf files"
    info "Usage:     ${self} [<options>] [<filename>.tex]"
    info "Options:
    -2, --ps2pdf          Generate pdf from postscript output
    -a, --autocompile     Enable autocompile mode. The latex file will be
                          compiled automatically whenever there is any
                          change in the file.
                          Run $green$self -h autocompile$normal for more info
    -A, --all-tex         Run autocompile mode on all .tex files instead of
                          just on the file provided in command line
    -B, --bibtex          Enable bibtex compilation
    -c, --choose4me       Choose some default settings: -i -r -s -T -w
    -C, --clean           Remove the temporary latex files upon exiting the
                          script. The list of temporary files that will be
                          removed can be configured in the config file.
    -d, --pdf             Output a pdf file,- this uses $PDFLaTeX
    -e, --beamer          Toggle beamer mode: disable $DVIPS_PAPER_OPTIONS option in dvips
    -E, --editor <editor> Provide an editor to be used with xdvi for
                          inverse search.
                          Run $green$self -h editor$normal for more info
    -h, --help            This help text
    -h autocompile        Help information on autocompile mode
    -h editor             Provide information on set-up of editor for inverse
                          search with xdvi
    -h inv-search         Help information on inverse search
    -i, --inv-search      Enable inverse search in dvi
    -n, --no-postscript   Output only dvi file
    -o, --pdf_ps          Generate ps automatically and also pdf via $PDFLaTeX
    -p, --postscript      Run dvips automatically, providing ps output
    -r, --recursive       Recursively compile the source. Otherwise
                          the program will compile once and exit
    -s, --silent          Print only errors/warnings output by $LaTeX/$PDFLaTeX
    -t <paper type>       Run dvips with -t<paper type> option.
                          Default paper type used is ${bold}letter${normal}
    -T, --no-interaction  Run $LaTeX/$PDFLaTeX with -interaction=nonstopmode
    -w, --no-warning      If -s is enabled, then disable output of warnings
                          If -T is enabled, then disable highlight of warnings
    -z, --stop            Exit script if $LaTeX gives errors
    --acroread            Use acrobat reader as pdf viewer in lieu of the
                          default set in the config file
    --no-color            Do not use color in output
    "
    info "If multiple -d,-n,-o,-p,-2 are given then the last one will be used
    "
    info "If no filename is given, then an interactive input prompt is provided
    ${underline}An example, when using beamer${normal}:
    btex -e -d -r -s    # recursive, silent, using $PDFLaTeX & beamer
    "
    info "Some extra functionality can be enabled by configuring the config
    file: $blue$config_dir/$config_file$normal
    "
}

# Usage: parse_cmdline "-some_command"
parse_cmdline() {
    local cmd="${1/-}"

    # Check for -xxxE<editor> or -xxxE <editor> in the command
    # This has to be run at the very beginning
    # Thankfully, this should not clash with -xxxt<paper> since no
    # dvips recognized paper size contains E in its name.
    if [[ "$cmd" =~ [a-zA-DF-Z0-9]*E{1}.* ]]; then
        btex_editor="${cmd#*E}"
        if [[ -z "$btex_editor" ]]; then
            btex_editor="$2"
            NUM_SHIFTS=1
        else
            cmd="${cmd/$btex_editor}"
        fi
        cmd="${cmd/E}"
    fi

    # Check for -xxxt<paper> or -xxxt <paper> in the command
    # This has to be run at the very beginning after -xxxE
    if [[ "$cmd" =~ [a-su-zA-Z0-9]*t{1}.* ]]; then
        PAPER="${cmd#*t}"
        if [[ -z "$PAPER" ]]; then
            PAPER="$2"
            NUM_SHIFTS=1
        else
            cmd="${cmd/$PAPER}"
        fi
        DVIPS_PAPER_OPTIONS="-t$PAPER"
        cmd="${cmd/t}"
    fi

    # Check for -2 embedded in the command
    if [[ "$cmd" =~ [a-zA-Z013-9]*2{1}.* ]]; then
        cmd="${cmd/2}"
        MODE="PS2PDF"
    fi

    # Check for -a embedded in the command
    if [[ "$cmd" =~ [b-zA-Z0-9]*a{1}.* ]]; then
        cmd="${cmd/a}"
        AUTOCOMPILE=1
    fi

    # Check for -A embedded in the command
    if [[ "$cmd" =~ [a-zB-Z0-9]*A{1}.* ]]; then
        cmd="${cmd/A}"
        INOTIFYFILES="*.tex"
    fi

    # Check for -B embedded in the command
    if [[ "$cmd" =~ [a-zAC-Z0-9]*B{1}.* ]]; then
        cmd="${cmd/B}"
        check bibtex && BIBTEX=1
    fi

    # Check for -c embedded in the command
    if [[ "$cmd" =~ [abd-zA-Z0-9]*c{1}.* ]]; then
        cmd="${cmd/c}"
        INVERSE_SEARCH="-src-specials"
        RECURSIVE=1
        # 2 = _no-interaction, 3 = _silent, 5 = _nowarning
        [[ $(( ${SILENT}%2 )) -eq 0 ]] || SILENT=$(( ${SILENT}*2 ))
        [[ $(( ${SILENT}%3 )) -eq 0 ]] || SILENT=$(( ${SILENT}*3 ))
        [[ $(( ${SILENT}%5 )) -eq 0 ]] || SILENT=$(( ${SILENT}*5 ))
    fi

    # Check for -C embedded in the command
    if [[ "$cmd" =~ [a-zABD-Z0-9]*C{1}.* ]]; then
        cmd="${cmd/C}"
        [[ "$CLEAN_FILES" ]] || CLEAN_FILES="aux log"
    fi

    # Check for -d embedded in the command
    if [[ "$cmd" =~ [a-ce-zA-Z0-9]*d{1}.* ]]; then
        cmd="${cmd/d}"
        MODE="PDF"
    fi

    # Check for -e embedded in the command
    if [[ "$cmd" =~ [a-df-zA-Z0-9]*e{1}.* ]]; then
        cmd="${cmd/e}"
        set_beamer_options
    fi

    # Check for -h embedded in the command
    if [[ "$cmd" =~ [a-gi-zA-Z0-9]*h{1}.* ]]; then
        die "Invalid option -h in $red$1$normal"
    fi

    # Check for -i embedded in the command
    if [[ "$cmd" =~ [a-hj-zA-Z0-9]*i{1}.* ]]; then
        cmd="${cmd/i}"
        INVERSE_SEARCH="-src-specials"
    fi

    # Check for -I embedded in the command
    if [[ "$cmd" =~ [a-zA-HJ-Z0-9]*I{1}.* ]]; then
        cmd="${cmd/I}"
        INDEX=1
    fi

    # Check for -n embedded in the command
    if [[ "$cmd" =~ [a-mo-zA-Z0-9]*n{1}.* ]]; then
        cmd="${cmd/n}"
        MODE="NO_POSTSCRIPT"
    fi

    # Check for -o embedded in the command
    if [[ "$cmd" =~ [a-np-zA-Z0-9]*o{1}.* ]]; then
        cmd="${cmd/o}"
        MODE="PDF_POSTSCRIPT"
    fi

    # Check for -p embedded in the command
    if [[ "$cmd" =~ [a-oq-zA-Z0-9]*p{1}.* ]]; then
        cmd="${cmd/p}"
        MODE="POSTSCRIPT"
    fi

    # Check for -r embedded in the command
    if [[ "$cmd" =~ [a-qs-zA-Z0-9]*r{1}.* ]]; then
        cmd="${cmd/r}"
        RECURSIVE=1
    fi

    # Check for -s embedded in the command
    if [[ "$cmd" =~ [a-rt-zA-Z0-9]*s{1}.* ]]; then
        cmd="${cmd/s}"
        [[ $(( ${SILENT}%3 )) -eq 0 ]] || SILENT=$(( ${SILENT}*3 ))
    fi

    # Check for -T embedded in the command
    if [[ "$cmd" =~ [a-zA-SU-Z0-9]*T{1}.* ]]; then
        cmd="${cmd/T}"
        [[ $(( ${SILENT}%2 )) -eq 0 ]] || SILENT=$(( ${SILENT}*2 ))
    fi

    # Check for -w embedded in the command
    if [[ "$cmd" =~ [a-vx-zA-Z0-9]*w{1}.* ]]; then
        cmd="${cmd/w}"
        [[ $(( ${SILENT}%5 )) -eq 0 ]] || SILENT=$(( ${SILENT}*5 ))
    fi

    # Check for -z embedded in the command
    if [[ "$cmd" =~ [a-yA-Z0-9]*z{1}.* ]]; then
        cmd="${cmd/z}"
        unset NON_STOP
    fi

    # If there is any other option left, then raise an error
    [[ "$cmd" ]] &&
        die "${red}-$cmd${normal}: Invalid option(s) left over from $1\n"
}

# Usage: set_beamer_options
set_beamer_options() {
    if [[ "$DVIPS_PAPER_OPTIONS" ]]; then
        DVIPS_PAPER_OPTIONS=""
        [[ "$PDF_VIEWER" = *xpdf ]] && XPDF_OPTIONS="-z 200"
    else
        DVIPS_PAPER_OPTIONS="-t$PAPER"
        [[ "$PDF_VIEWER" = *xpdf ]] && XPDF_OPTIONS=
    fi
}

# Usage: setup_config_file
setup_config_file() {
    info "$blue$config_dir/$config_file$normal config file not found. Creating ..."
    [[ ! -d "$config_dir" ]] && {
        mkdir -p "$config_dir" || die "Could not create $config_dir"
    }
    cat <<END > "$config_dir/$config_file"
# btex config file
# PS (POSTSCRIPT) file viewer,- uncomment or add a viewer
# Default is empty.
# PS_VIEWER=gv
# PS_VIEWER=kghostview
# PS_VIEWER=okular
# PS_VIEWER=evince
#
# PS viewer options,- the following are for gv
# Default is empty.
# PS_VIEWER_OPTIONS="-watch -spartan"
#
# PDF file viewer,- uncomment or add a viewer
# Default is empty.
# PDF_VIEWER=xpdf
# PDF_VIEWER=kpdf
# PDF_VIEWER=okular
# PDF_VIEWER=evince
# PDF_VIEWER=gv
# PDF_VIEWER=kghostview
#
# PDF viewer options,- the following are for xpdf
# Default is empty.
# PDF_VIEWER_OPTIONS="-q"
#
# DVI file viewer,- uncomment or add a viewer
# Default is empty.
# DVI_VIEWER=xdvi
# DVI_VIEWER=kdvi
# DVI_VIEWER=okular
# DVI_VIEWER=evince
#
# DVI viewer options,- following are for xdvi
# Default is empty.
# DVI_VIEWER_OPTIONS="-watchfile 1"
#
# Default programs, first one is for ps, second is for pdf
# Default is LaTeX=latex and PDFLaTeX=pdflatex.
# LaTeX=latex
# PDFLaTeX=pdflatex
#
# Extra options used by LaTeX and PDFLaTeX. Default is empty.
# LaTeX_Opts=""
# PDFLaTeX_Opts=""
# Suggested Options:
# LaTeX_Opts="-file-line-error"
# PDFLaTeX_Opts="-file-line-error"
#
# Paper type used in creating ps from dvi. This is used by dvips
# Default is letter
# PAPER=letter
#
# Editor to be used with xdvi for inverse search. Use -h editor for more
# information on how to set up.
# Default is gvim
# btex_editor=gvim
#
# Delay used in inotifywait. This delay takes care of the time for which
# the file is actually written to the disk. There are some issues with the
# file not being found by (pdf)latex if the delay is too small.
# Modify it to a larger value if the autocompile mode is aborted because
# of "file not found" messages.
# The delay is in seconds. Fractional values are possible. Default is 0.5
# INOTIFY_DELAY=0.5
#
# Polled autocompile mode. Use this mode if inotifywait is not installed
# and you either can not install it or you don't want to install it!
# Set POLLED_AUTOCOMPILE to a non-zero integer. The value of the integer
# determines the polling interval,- the number of seconds we will wait
# before checking again whether the latex file has been modified.
# If this variable is set to a non-zero integer and inotifywait is also
# installed, then inotifywait will be used.
# Default is empty.
# POLLED_AUTOCOMPILE=1
#
# If you want temporary files to be cleaned upon *exiting the script*, then
# configure the following variable CLEAN_FILES. The behavior of the
# script is as follows:
# CLEAN_FILES is empty or not set in this config file: if -C is passed
#     as argument to ${self} then all *.aux and *.log will be deleted in
#     the directory where the .tex is compiled.
# CLEAN_FILES is nonempty: even if -C argument is not passed to ${self},
#     all the files with extensions mentioned in this variable will be
#     deleted. Passing -C argument to ${self} has no effect.
# Possible string of extensions of log files are given below
# Default value is empty.
# CLEAN_FILES="aux log"
# CLEAN_FILES="aux ilg ind lof log lot out toc"
#
# The default MODE for the compiled output file
# Possible modes:
#   PS2PDF:         PDF is generated from PS using ps2pdf
#   POSTSCRIPT:     Only PS is generated
#   ASK_POSTSCRIPT: DVI is generated, user is asked if PS is wanted
#   NO_POSTSCRIPT:  Only DVI is generated
#   PDF:            PDF is generated using pdflatex
#   PDF_POSTSCRIPT: PDF is generated using pdflatex && PS is generated
#   Default is NO_POSTSCRIPT
# MODE="NO_POSTSCRIPT"
END
    exit 0
}
# }}}

self="${0##*/}"
config_dir="$HOME"/.config
config_file="${self}.config"
# Source the config file
if [[ -f "$config_dir/$config_file" ]]; then
    . "$config_dir/$config_file"
else
    setup_config_file
fi

# Variables from config file. All variables except PAPER are monkey-proof
[[ "$DVI_VIEWER" ]] && check "$DVI_VIEWER" die DVI_VIEWER
[[ "$PDF_VIEWER" ]] && check "$PDF_VIEWER" die PDF_VIEWER
[[ "$PS_VIEWER"  ]] && check "$PS_VIEWER"  die PS_VIEWER
: ${LaTeX:=latex}
: ${PDFLaTeX:=pdflatex}
: ${PAPER:=letter}
: ${INOTIFY_DELAY:=0.5}
: ${POLLED_AUTOCOMPILE:=0}
: ${MODE:=NO_POSTSCRIPT}

# Variables not present in the config file
declare -i AUTOCOMPILE=0 # Set to 1 to enable autocompile mode
declare -i NON_STOP=1   # By default use non-stop mode, i.e. script will
                        # not exit on latex error
declare -i NUM_SHIFTS=0 # Number of shifts after parse_cmdline
declare -i RECURSIVE=0  # If 0, script will compile only once and exit
declare -i SLEEP_TIME=1 # Amount of delay when using sleep command
BIBLIOGRAPHY=           # This is set to 1 when bibliography is detected
DVIPS_PAPER_OPTIONS="-t$PAPER"
INDEX=                  # This is set to 1 when index is detected
INOTIFYFILES=           # Set it to "*.tex" to check status of all .tex
INVERSE_SEARCH=         # Command line option when inv search is enabled
INVERSE_SEARCH_CAPABLE= # non-empty if latex takes -src-specials argument
XPDF_OPTIONS=
# Possible values of SILENT are:
#   integers 1, 2, 3, 5 and their combinations
#   1: latex is compiled as if it is typed as latex <file>.tex (default)
#   2: latex is compiled with --interaction nonstopmode ( _no-interaction )
#   3: latex is compiled as usual and warning/err are shown and latex stops
#      at errors ( equivalent to former _silent )
#   5: only errs shown, warnings are not shown. This can be enabled only
#      after either 2 or 3 has been enabled ( _nowarning formerly )
#   x*y where x \in {2,3,5} and y \in {2,3,5}\{x}: combinations of above
declare -i SILENT=1

#echo $-
if [[ "$DISPLAY" && -z "$@" ]] && ! tty -s; then
    exec xterm -hold -e "$(dirname "$0")/$(basename "$0")" -h
fi

until [[ -z "$1" ]]; do
    case "$1" in
    -2 | --ps2pdf)      MODE="PS2PDF" ;;
    -a | --autocompile) AUTOCOMPILE=1 ;;
    -A | --all-tex)     INOTIFYFILES="*.tex" ;;
    -B | --bibtex)      check bibtex && BIBTEX=1 ;;
    -c | --choose4me)   # Choose a default set of options automatically
        # -i -r -s -T -w
        INVERSE_SEARCH="-src-specials"
        RECURSIVE=1
        # 2 = _no-interaction, 3 = _silent, 5 = _nowarning
        [[ $(( ${SILENT}%2 )) -eq 0 ]] || SILENT=$(( ${SILENT}*2 ))
        [[ $(( ${SILENT}%3 )) -eq 0 ]] || SILENT=$(( ${SILENT}*3 ))
        [[ $(( ${SILENT}%5 )) -eq 0 ]] || SILENT=$(( ${SILENT}*5 ));;
    -C | --clean)       [[ "$CLEAN_FILES" ]] || CLEAN_FILES="aux log";;
    -d | --pdf)         MODE="PDF";;
    -e | --beamer)      set_beamer_options;;
    -E | --editor)      btex_editor="$2"; shift ;;
    -h | --help)        help "$2"; exit ;;
    -i | --inv-search)  INVERSE_SEARCH="-src-specials" ;;
    -I | --index)       INDEX=1 ;;
    -n | --no-postscript) MODE="NO_POSTSCRIPT";;
    -o | --pdf_ps)      MODE="PDF_POSTSCRIPT";;
    -p | --postscript)  MODE="POSTSCRIPT";;
    -r | --recursive)   RECURSIVE=1 ;;
    -s | --silent)      [[ $(( ${SILENT}%3 )) -eq 0 ]] || \
        SILENT=$(( ${SILENT}*3 ));;
    -t) [[ "${2}" = -* ]] && die "$2: Invalid paper type to -t option"
        PAPER="${2}"
        DVIPS_PAPER_OPTIONS=-t"$PAPER"
        shift ;;
    -T | --no-interaction) [[ $(( ${SILENT}%2 )) -eq 0 ]] || \
        SILENT=$(( ${SILENT}*2 )) ;;
    -w | --no-warning)  [[ $(( ${SILENT}%5 )) -eq 0 ]] || \
        SILENT=$(( ${SILENT}*5 )) ;;
    -z | --stop)        unset NON_STOP ;;
    -*=*) _var_="$1"
		shift
		set -- for_shift_below "${_var_%=*}" "${_var_#*=}" "$@"
		unset _var_ ;;
    --acroread)         check acroread && PDF_VIEWER="$CHECKED" ;;
    --no-color)         unset ${COLORS[@]} ;;
    --*) die "${red}$1${normal}: Invalid Option!\n" ;;
    -*) parse_cmdline "$1" "$2"
        [[ $NUM_SHIFTS -eq 1 ]] && shift && NUM_SHIFTS=0 ;;
    *)  filename="$1" ;;
    esac
    shift
done
unset NUM_SHIFTS
# Other functions used in the script. {{{
# The functions are all presented in alphabetical order.

# This function waits for the tex file to update and then compiles it.
# Usage: autocompile <mode>
# <mode> is one of the possible modes as set in $MODE
autocompile() {
    local clr="$(tput el)" i="1" MODE="${1}"
    [[ "$INOTIFYFILES" ]] || INOTIFYFILES="$filename"
    if [[ "$INOTIFYWAIT" ]]; then
        while true; do
            infor "${blue}Waiting$normal for change in the status of file ..."
            if $INOTIFYWAIT -qq $INOTIFYFILES; then
                info "Autocompile # $i$clr"
                # Sleep for a brief period while the file gets written to
                # disk. Otherwise file is sometimes not found on the disk
                sleep "$INOTIFY_DELAY" || die \
                 "Set INOTIFY_DELAY to some positive real number, you \$#@!%"
                compile "$MODE"
                ((i++))
            fi
        done
    elif [[ "$POLLED_AUTOCOMPILE" -gt 0 ]]; then
        local TMP_FILE
        TMP_FILE="$( mktemp /tmp/btex.XXXX )" || TMP_FILE="/tmp/$UID.btex"
        # There can be only one loop since we want it to not exit the
        # script on pressing Ctrl-C
        while true; do
            infor "${blue}Waiting$normal for change in the status of file ..."
            if [[ "$( find $INOTIFYFILES -maxdepth 0 -newer "$TMP_FILE" \
                2>/dev/null )" ]]; then
                touch -d "$( ls -lt --full-time $INOTIFYFILES | \
                    awk 'NR==1 { print $6" "$7 }' )" "$TMP_FILE"
                info "Autocompile # $i$clr"
                compile "$MODE"
                ((i++))
            else
                sleep "$POLLED_AUTOCOMPILE"
            fi
        done
        # If Ctrl-C is pressed then this while loop will be quit and the
        # following command will remove the tmp file
        rm "$TMP_FILE"
    fi
}

# Usage: bibliography_is_present <filename|*.tex> [<filename2>]
bibliography_is_present() {
    grep -q -s \
    '^[[:space:]]*\\begin[[:space:]]*{[[:space:]]*thebibliography[[:space:]]*}'\
        $@ && return 0
    grep -q -s '^[[:space:]]*\\bibliography[[:space:]]*{[^}]*}' $@ && \
        return 0
    return 1
}

# Usage: bibtex_is_present <filename|*.tex> [<filename2>]
bibtex_is_present() {
        grep -q -s -E -e \
        '^[[:space:]]*\\bibliography[[:space:]]*{[[:space:]]*[[:alnum:]]*(\.bib)?[[:space:]]*}' $@ && \
        return 0
}


# Whether we can do the autocompile mode or not
# Returns 0 or 1 depending on the checks performed
# Usage: can_autocompile
can_autocompile() {
    # Check for the presence of inotifywait
    if check inotifywait Err; then
        INOTIFYWAIT="$CHECKED"
        return 0
    elif [[ "${POLLED_AUTOCOMPILE//[0-9]}" || "$POLLED_AUTOCOMPILE" -eq 0 ]]; then
        AUTOCOMPILE="-1"
        POLLED_AUTOCOMPILE="0"       # Make POLLED_AUTOCOMPILE monkey-proof
        echo -e "\
      $red+-----------------------------------------------------------+
      |                                                           |
      | ${bold}inotifywait$normal not found. Autocompile mode will be disabled  $red|
      |                                                           |
      |$normal If you want to enable polled autocompile, then set the    $red|
      |$normal variable POLLED_AUTOCOMPILE in the config file to a       $red|
      |$normal non-zero integer. The integer will determine the polling  $red|
      |$normal interval (in seconds),- the number of seconds we will wait$red|
      |$normal before checking whether the latex file has been modified. $red|
      |$normal FYI, your config file is:                                 $red|
      |$normal $blue$config_dir/$config_file$red
      |                                                           |
      +-----------------------------------------------------------+$normal"
      sleep "$SLEEP_TIME"
      return 1
    elif [[ "$POLLED_AUTOCOMPILE" -gt 0 ]]; then
        echo -e "\
      $red+-----------------------------------------------------------+
      |                                                           |
      | ${bold}inotifywait$normal not found. Polled autocompile mode is enabled $red|
      |                                                           |
      |$normal Polling interval is $yellow$POLLED_AUTOCOMPILE$normal seconds.                            $red|
      |$normal Polled autocompile mode is slightly slower than inotify.$red  |
      |$normal So, be patient!                                         $red  |
      |                                                           |
      +-----------------------------------------------------------+$normal"
      return 0
    fi
    AUTOCOMPILE="-1"
    return 1
}

# Remove temporary latex files as specified in the variable CLEAN_FILES
# Usage: clean_files
clean_files() {
    [[ "$CLEAN_FILES" ]] || return 0
    # If _silent mode is on then the user doesn't want tons of output
    if [[ "$(( ${SILENT}%3 ))" -eq 0 ]]; then
        infon "Removing files ending with extension"
        for ext in $CLEAN_FILES; do
            echo -ne "${yellow}.$ext$normal "
            rm -f *.$ext
        done
    else
        for ext in $CLEAN_FILES; do
            info "Removing files ending in ${yellow}.$ext$normal"
            rm -fv *.$ext
        done
    fi
    echo
}

# Usage: compile <mode>
# <mode> is one of the possible modes as set in $MODE
compile() {
    case "${1}" in
        ASK_POSTSCRIPT) compile_ps ask ;;
        POSTSCRIPT)     compile_ps ;;
        NO_POSTSCRIPT)  compile_ps only_dvi;;
        PDF)        compile_pdf;;
        PS2PDF)     compile_ps
            infon "Creating $file.pdf from $file.ps ... "
            ps2pdf "$file".ps
            success $?;;
        PDF_POSTSCRIPT) compile_ps
            compile_pdf;;
        *)  die "$1: Invalid mode.";;
    esac
}

# Usage: compile_pdf
compile_pdf() {
    info "Converting the (newer) eps images to pdf ..."
    find *.eps 2>/dev/null | while read i; do
        if [[ "${i%\.*}.pdf" -ot "$i" ]]; then
            infon "Converting ${bold}$i${normal} to ${bold}${i%\.*}.pdf${normal} ... "
            # -dEPSCrop crops to figure. /prepress embeds fonts
            ps2pdf -dPDFSETTINGS=/prepress -dEPSCrop "$i"
            success $?
        fi
    done
    run_pdflatex "1st" || return
    if [[ "$BIBTEX" || "$INDEX" ]]; then
        [[ "$BIBTEX" ]]   && run_bibtex
        [[ "$INDEX" ]]    && run_index
        run_pdflatex "2nd" && run_pdflatex "3rd"
    elif [[ "$BIBLIOGRAPHY" || "$INDEX" ]]; then
        # If it has come till here, then pdflatex ran ok earlier
        # So, we don't need to return on error
        [[ "$INDEX" ]]    && run_index
        run_pdflatex "2nd"; run_pdflatex "3rd"
    fi
}

# Usage: compile_ps
compile_ps() {
    run_latex "1st" || return
    if [[ "$BIBTEX" || "$INDEX" ]]; then
        [[ "$BIBTEX" ]]   && run_bibtex
        [[ "$INDEX" ]]    && run_index
        run_latex "2nd"   && run_latex "3rd"
    elif [[ "$BIBLIOGRAPHY" || "$INDEX" ]]; then
        # If it has come till here, then latex ran ok earlier
        # So, we don't need to return on error
        [[ "$INDEX" ]]    && run_index
        run_latex "2nd"   && run_latex "3rd"
    fi

    case "${1}" in
        ask)        echo; infon "CONTINUE with dvips?[enter/y or n]:"
                    read -n 1 answer; echo ;;
        only_dvi)   answer="n" ;;
        *)          answer="y" ;;
    esac
    case "$answer" in
        "" | [yY]*) infon "Creating $file.ps ... ";#echo
            local e="$( dvips ${DVIPS_PAPER_OPTIONS} -q -o "$file.ps" \
                              "$file.dvi" 2>&1 )"
            success $?
            [[ $(( ${SILENT}%3 )) -ne 0 && "$e" ]] &&
                Err "Errors and Warnings from ${green}dvips$normal:\n$e" ;;
        *) ;; # Do nothing
    esac
}

# Whether index is to be generated or not.
# Usage: index_is_present <filename>
index_is_present() {
    grep -q -s '^[[:space:]]*\\makeindex' $@ && return 0
    return 1
}

# This function simply echo's the action the while loop should take when
# Ctrl-C is pressed.
# Usage: on_trap
on_trap() {
    if [[ "$AUTOCOMPILE" -eq 1 ]]; then
        # ctrl-C was pressed while in autocompile mode. Don't exit the
        # script. Simply continue with the rest of the script
        break
    else
        echo  # Just for kicks
        exit
    fi
}

# Usage: run_bibtex
run_bibtex() {
    infor "Running bibtex"
    if [[ "$SILENT" -gt 2 ]]; then
        bibtex --terse "$file" &> /dev/null
    elif [[ "$SILENT" -eq 2 ]]; then
        bibtex --terse "$file"
    else
        bibtex "$file"
    fi
    [[ $? -ne 0 && -z "$NON_STOP" ]] && die "$filename: bibtex failed"
}

# Usage: run_index
run_index() {
    infor "Running makeindex"
    if [[ "$SILENT" -gt 1 ]]; then
        makeindex -q "$file"
    else
        makeindex "$file"
    fi
    [[ $? -ne 0 && -z "$NON_STOP" ]] && die "$filename: makeindex failed"
}

# Run the latex command. This accepts an additional parameter which is the
# run that is being performed. This parameter will be displayed in output.
# Usage: run_latex "<1st|2nd|3rd>"
run_latex() {
    local status
    infor "$cyan$1$normal run of $LaTeX"
    case "$SILENT" in
        30) $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            "$filename" >&1 | sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        10) $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            "$filename" >&1 | sed -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status="${PIPESTATUS[0]}";;
        15) $LaTeX $LaTeX_Opts $INVERSE_SEARCH "$filename" >&1 | \
            sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        6) $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            "$filename" >&1 | sed -ne \
                "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        2) $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            "$filename" >&1 | sed -e \
                "/Warning/,/^$/s/\(.*\)/$pink\1$normal/" \
                -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status="${PIPESTATUS[0]}";;
        3) $LaTeX $LaTeX_Opts $INVERSE_SEARCH "$filename" >&1 | \
            sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        *)  $LaTeX $LaTeX_Opts $INVERSE_SEARCH "$filename"
            status=$? ;;
    esac

    if [[ "$status" -ne 0 && -z "$NON_STOP" ]]; then
        die "${filename}: Error in $LaTeX compilation"
    else
        return "$status"
    fi
}

# Run the pdflatex command. This accepts an additional parameter which is
# the run that is being performed. This parameter will be displayed in o/p.
# Usage: run_pdflatex "<1st|2nd|3rd>"
run_pdflatex() {
    local status
    infor "$cyan$1$normal run of $LaTeX"
    case "$SILENT" in
        30) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode "$filename" \
            >&1 | sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        10) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode "$filename" \
            >&1 | sed -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status="${PIPESTATUS[0]}";;
        15) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH "$filename" >&1 | \
            sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        6) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode "$filename" \
            >&1 | sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        2) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode "$filename" \
            >&1 | sed -e "/Warning/,/^$/s/\(.*\)/$pink\1$normal/" \
                -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status="${PIPESTATUS[0]}";;
        3) $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH "$filename" >&1 | \
            sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/.*\.tex:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status="${PIPESTATUS[0]}";;
        *)  $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH "$filename"
            status=$? ;;
    esac

    if [[ "$status" -ne 0 && -z "$NON_STOP" ]]; then
        die "${filename}: $PDFLaTeX compilation failed"
    else
        return "$status"
    fi
}

# Function to make inverse search work between xdvi and editor (gvim)
# Usage: set_xdvi
set_xdvi() {
    # The following algo for gvim runs only if btex_editor is empty or it
    # has been set to gvim
    # Enter gvim --remote here:
    #   determine if only one gvim is running, if so take that as the remote
    #   else: check to see if multiple gvim's are running
    #       if yes: check to see if the $file has servername with its gvim
    #       else:   discard all lines with servername
    #               check the order $o of the $file in ps output => GVIM$o
    #       else:   file is not open, can't do anything.
    #   else: file is not open, can't do anything.
    [[ "$DVI_VIEWER" && "${DVI_VIEWER/xdvi/}" = "$DVI_VIEWER" ]] && return

    # If btex_editor is non-empty then start using it
    if [[ "$btex_editor" = "custom" ]]; then
        # Nothing to do here
        echo -n ""
    elif [[ "$btex_editor" ]]; then
        which "$btex_editor" >& /dev/null  || {
            Err -w "$green$btex_editor$normal is not in your \$PATH.
    I hope the name is correctly specified."
            sleep "$SLEEP_TIME"
        }
    elif which gvim >& /dev/null; then
        btex_editor="gvim"
    else
        Err -w "No editor is set and gvim is not found. Inverse search with
    xdvi will not work."
        return
    fi
    local TMP_FILE _editor="${btex_editor##*\/}"
    TMP_FILE="$(mktemp /tmp/btex.XXXX)" || TMP_FILE=/tmp/"$UID".btex
    case "$_editor" in
        custom)     # This is the custom editor. The output of the script
                    # that is run should contain the editor command to be
                    # passed to xdvi. The script to be run should be
                    # $config_dir/btex_custom_editor
            if [[ -x "$config_dir/btex_custom_editor" ]]; then
                edit_cmd="$( $config_dir/btex_custom_editor )"
            else    # Else make this variable empty.
                edit_cmd=""
            fi;;
        ""|gvim|rgvim|gview|rgview|eview|vim|rview|evim|*vimdiff)
            # If the variable btex_editor is empty then we will
            # just search for *vim. The result will be non-empty
            # editor output for xdvi only if *vim is running and it
            # has the required latex file opened.
            local server
            ps -u "$USER" -o command | grep -vw "grep" | \
                grep -E "[/]?${_editor}"  > "$TMP_FILE"
            if grep "$filename" "$TMP_FILE" | grep -q "\-\-servername"; then
                server="$(grep -E \
                "($filename\ .*\-\-servername|\-\-servername\ .*$filename)" \
                "$TMP_FILE" | sed -ne \
                "s@^.*\-\-servername[[:space:]]\+\([[:alnum:]]*\) .*@\1@p")"
            elif grep -q "$filename" "$TMP_FILE"; then
                # Hopefully there aren't two files of the same name open :S
                # If xdvi is already running, having been started from
                # gvim, then it should be having the --servername command
                # embedded in it. In this case the previous if will succeed
                # and we will get the correct gvim
                server="$(grep -ns "$filename" "$TMP_FILE")"
                # The following line will get the first one, if there are
                # multiple files with same name open.
                server="${server%%:*}"
                server="$($btex_editor --serverlist | tail -n +"$server" | \
                    head -n 1)"
                if [[ "$server" ]]; then
                    edit_cmd="$btex_editor --servername $server --remote +%l %f"
                else
                    Err -w "Either the file $filename is not open, or the filename
    was not presented in the command line while opening gvim.
    Couldn't determine the gvim server which has the file open. Inverse
    search will not work."
                    edit_cmd=""
                fi
            fi ;;
            *)  Err "$_editor: Unknown editor. There is no support for this
    editor in $yellow${self}$normal."
            sleep "$SLEEP_TIME"
            help "editor";;
        esac
        rm -f "$TMP_FILE"
}

# Shows a menu on the terminal. The options in the menu change depending on
# what is configured in the config_file, or on what is actually enabled.
# Usage: show_menu
show_menu() {
    echo; echo
    local g="$green" n="$normal"
    local auto dviv inv pdfv psv warn \
        non_int="Enable" \
        silnt="Enable Silent mode            " \
        bmr="Enable Beamer mode            " \
        bibtx="Enable"
    [[ "$PS_VIEWER"  ]] && \
        psv="${g}L$n: Launch ps viewer (${PS_VIEWER##*\/})"
    [[ "$DVI_VIEWER" ]] && \
        dviv="${g}X$n: Launch dvi viewer (${DVI_VIEWER##*\/})"
    [[ "$PDF_VIEWER" ]] && \
        pdfv="${g}F$n: Launch pdf viewer (${PDF_VIEWER##*\/})"
    [[ "$INOTIFYWAIT" || "$POLLED_AUTOCOMPILE" -gt 0 ]] && \
        auto="    ${g}A${n}: Enable Autocompile mode\n"
    [[ "$SILENT" -gt 1 ]] && warn="${g}W$n: Enable output of warnings"
    [[ "$INVERSE_SEARCH_CAPABLE" ]] && inv="\n    ${g}I$n: Enable Inverse search"

    infon "${bold}Current mode$n:${blue}"
    case "$MODE" in
        ASK_POSTSCRIPT) echo -e "\tPostscript file is generated after confirmation";;
        NO_POSTSCRIPT)  echo -e "\tOnly DVI file is generated";;
        POSTSCRIPT)     echo -e "\tPostscript file is automatically generated";;
        PS2PDF)         echo -e "\tPDF file is generated from PS, using ps2pdf";;
        PDF)            echo -e "\tPDF file is generated using $PDFLaTeX";;
        PDF_POSTSCRIPT) echo -e "\tPS file + PDF file generated via $PDFLaTeX";;
        *)              die "$MODE: Invalid mode.";;
    esac
    case "$SILENT" in
        30) non_int="Disable"
            silnt="Disable Silent mode           "
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tOnly errors in $LaTeX output are shown";;
        10) non_int="Disable"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tErrors in $LaTeX output are highlighted";;
        15) silnt="Disable Silent mode           "
            echo -e "\t\t\tOnly errors in $LaTeX output are shown";;
        6)  non_int="Disable"
            silnt="Disable Silent mode           "
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tOnly errors/warnings in $LaTeX output are shown";;
        2)  non_int="Disable"
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tErrors/warnings in $LaTeX output are highlighted";;
        3)  silnt="Disable Silent mode           "
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tOnly errors/warnings in $LaTeX output are shown";;
        *)  ;;
    esac

    [[ "$INVERSE_SEARCH" ]] && {
        echo -e "\t\t\tInverse search is enabled"
        inv="${inv/Enable/Disable}"
    }
    [[ "$BIBTEX" ]] && {
        echo -e "\t\t\tBibtex compilation is enabled"
        bibtx="Disable"
    }

    [[ "$DVIPS_PAPER_OPTIONS" ]] || {
        echo -e "\t\t\tBeamer mode is enabled"
        bmr="Disable Beamer mode           "
    }
    # This lower part has an ugly long string argument
    infon "Want to continue with another compile?
    Enter/${g}Y$n: Yes (Repeat compile)     ${g}N$n: No (${g}Q${n}uit)
    ${g}P$n: Toggle Postscript output       ${psv}
    ${g}D$n: Toggle Pdf Output              ${dviv}
    ${g}2$n: Toggle PS to PDF output        ${pdfv}
    ${g}O$n: Toggle both PS and PDF output
    ${g}E$n: $bmr ${g}B$n: $bibtx Bibtex compilation \
$inv
    ${g}T$n: $non_int non-interactive compilation
    ${g}S$n: $silnt $warn
$auto" # if auto is empty, this acts as a \n, o/w auto provides \n

    echo -ne " $yellow*$normal Give an option (2/"
    [[ "$auto" ]] && echo -ne "A/"
                     echo -ne "B/D/E/"
    [[ "$pdfv" ]] && echo -ne "F/"
    [[ "$inv"  ]] && echo -ne "I/"
    [[ "$psv"  ]] && echo -ne "L/"
                     echo -ne "N/O/P/Q/S/T/"
    [[ "$warn" ]] && echo -ne "W/"
    [[ "$dviv" ]] && echo -ne "X/"
                     echo -ne "[Y]): "
}

# Print a nice message depending on the exit status of the command run.
# Usage: success <status>
success() {
    ([[ "${1}" -ne 0 ]] && echo -e "${red}Failed!${normal}") ||\
        echo -e "${green}Done!${normal}"
}
# }}}

# check for command line acroread option: if the viewers are different then
# set PDF_VIEWER_OPTIONS to null
[[ "$pdf_viewer" != "$PDF_VIEWER" ]] && PDF_VIEWER_OPTIONS=

# Some error checking is done here. But no checks on MODE are done later on
# in the menu. So, it is possible that the script fails of a mode is chosen
# from the menu but the commands required for that mode are not present
check "$LaTeX"
[[ "$MODE" = *POSTSCRIPT ]]  && check dvips
[[ "$MODE" = "PS2PDF"    ]]  && check dvips       && check ps2pdf
[[ "$MODE" = "PDF"       ]]  && check "$PDFLaTeX" && check ps2pdf
check_dvips_paper_options "$PAPER"
# Ensure that warnings are enabled only when either non-interaction or
# silent has been enabled.
[[ "$SILENT" -eq 5 ]] && {
    Err "You need to enable at least one of -T or -s in order to enable -w
    Unsetting the option -w.
    "
    SILENT=1
}


# All about files
if [[ -z "${filename}" ]]; then
    read_filename 1 tex
    filename="$FILEPATH"
    unset FILEPATH
fi
# Change to the directory containing the tex file, else a lot will go awry
[[ "$filename" = */* ]] && cd "${filename%\/*}"
filename="${filename##*\/}"
# Check for latex files with spaces
if [[ ! -f "${filename}" || "${filename/ /}" != "${filename}" ]]; then
    echo; die "${filename} does not exist
    Do not enter filenames with spaces in them\n"
fi
file="${filename%\.tex}"


trap "on_trap" 1 2 5 15

# Autodetect beamer mode
if [[ "$DVIPS_PAPER_OPTIONS" ]] && \
    grep -q -s "[ ]*\\documentclass.*beamer" "$filename"; then
    info "Detected beamer: enabling beamer mode"
    set_beamer_options
    sleep "$SLEEP_TIME"
fi

# Autodetect bibliography - not quite complete - also need auto-bibtex
# Need to check for \input{filename} which contains bibliography
# information
if bibtex_is_present "$filename" || \
    (  [[ "$INOTIFYFILES" = "*.tex" ]] && bibtex_is_present "*.tex" ); then
    info "Detected bibtex in $filename.
    ${LaTeX##*/}/${PDFLaTeX##*/} will be run thrice"
    BIBTEX=1
    sleep "$SLEEP_TIME"
elif bibliography_is_present "$filename" || \
    ( [[ "$INOTIFYFILES" = "*.tex" ]] && bibliography_is_present "*.tex" \
    ); then
    info "Detected bibliography in $filename.
    ${LaTeX##*/}/${PDFLaTeX##*/} will be run thrice"
    BIBLIOGRAPHY=1
    sleep "$SLEEP_TIME"
fi

if index_is_present "$filename"|| ( [[ "$INOTIFYFILES" = "*.tex" ]] && \
    index_is_present "*.tex" ); then
    info "Detected index in $filename.
    ${LaTeX##*/}/${PDFLaTeX##*/} will be run once, then makeindex will be run,
    then ${LaTeX##*/}/${PDFLaTeX##*/} will be run two more times"
    INDEX=1
    sleep "$SLEEP_TIME"
fi

# Compile the file with command line parameters
if [[ "$AUTOCOMPILE" -eq 1 ]] && can_autocompile; then
    autocompile "$MODE"
else
    compile "$MODE"
fi
[[ "$RECURSIVE" -eq 0 ]] && {
    clean_files
    exit
}

# can_autocompile makes AUTOCOMPILE=-1 if autocompile is not possible
# So, if it has already been run above, then it won't run here again
[[ "$AUTOCOMPILE" -eq 0 ]] && can_autocompile


# Determine if the (pdf)latex has -src-specials command line option
if $LaTeX -help | grep -q "^-src-specials"; then
    INVERSE_SEARCH_CAPABLE=1
    [[ "$INVERSE_SEARCH" ]] && set_xdvi
fi

# Now, enter recursion
while true; do
    show_menu
    read -n 1 answer; echo
    case "$answer" in         # Options arranged alphabetically
    2)      MODE="PS2PDF"; compile "$MODE";;
    [aA])   [[ "$INOTIFYWAIT" || "$POLLED_AUTOCOMPILE" -gt 0 ]] || \
            die "$answer: Invalid option!
    This option will be enabled when you have either inotifywait present,
    or you have POLLED_AUTOCOMPILE set to a non-zero integer in the config.
    "
            info "Autocompile mode ${bold}Enabled${normal}. Ctrl-C to exit."
            AUTOCOMPILE=1
            autocompile "$MODE"
            AUTOCOMPILE="0";;
    [bB])   if [[ -z "$BIBTEX" ]]; then
                check bibtex && BIBTEX=1
            else unset BIBTEX
            fi;;
    [dD])   if [[ "$MODE" = "PDF" ]]; then
                MODE="ASK_POSTSCRIPT"; compile "$MODE"
            else
                MODE="PDF"; compile "$MODE"
            fi ;;
    [eE])   set_beamer_options;;
    [fF])   [[ "$PDF_VIEWER" ]] || \
                die "$answer: Invalid option!
    This option will be enabled when you set a pdf viewer in the config
    file $blue$config_dir/$config_file$normal"
            [[ "$file.pdf" -ot "$filename" ]] && {
                echo
                Err -w \
                "The TEX file has been modified since this PDF was created"
                sleep "$SLEEP_TIME"
            }
            $PDF_VIEWER $PDF_VIEWER_OPTIONS $XPDF_OPTIONS $file.pdf >& \
                /dev/null & ;;
    [iI])   if [[ "$INVERSE_SEARCH" ]]; then
                INVERSE_SEARCH=; edit_cmd=; echo
                info "Disabling inverse search during compilation. Restart ${DVI_VIEWER##*\/}."
                sleep "$SLEEP_TIME"
            elif [[ "$INVERSE_SEARCH_CAPABLE" ]]; then
                INVERSE_SEARCH="-src-specials"; echo
                set_xdvi
                info "Enabling inverse search during compilation.  Restart ${DVI_VIEWER##*\/}"
                [[ "$DVI_VIEWER" != *xdvi ]] &&\
                info "You will need to configure ${DVI_VIEWER##*\/} to use this feature"
                sleep "$SLEEP_TIME"
            else
                die "$answer: Invalid option!
    This option will be enabled when your $LaTeX/$PDFLaTeX is recent enough to
    accept the -src-specials argument"
            fi;;
    [lL])   [[ "$PS_VIEWER" ]] || \
                die "$answer: Invalid option!
    This option will be enabled when you set a ps viewer in the config file
    $blue$config_dir/$config_file$normal"
            if [[ -f "$file.ps" ]]; then
                [[ "$file.ps" -ot "$filename" ]] && {
                    echo
                    Err -w \
                    "The TEX file has been modified since this PS was created"
                    sleep "$SLEEP_TIME"
                }
                $PS_VIEWER $PS_VIEWER_OPTIONS $file.ps 2>/dev/null &
                [[ $? -ne 0 ]] && Err "Error in launching ${PS_VIEWER##*\/}"
            else    Err "$file.ps does not exist!"
            fi ;;
    [oO])   if [[ "$MODE" = "PDF_POSTSCRIPT" ]]; then
                MODE="ASK_POSTSCRIPT"; compile "$MODE"
            else
                MODE="PDF_POSTSCRIPT"; compile "$MODE"
            fi ;;
    [pP])   if [[ "$MODE" = "POSTSCRIPT" || "$MODE" = "ASK_POSTSCRIPT" ]]; then
                MODE="NO_POSTSCRIPT"; compile "$MODE"
            else
                MODE="POSTSCRIPT"; compile "$MODE"
            fi ;;
    [qQnN]) break ;;
    [sS])   # Enable silent mode in either interactive/non-int. setup
            if [[ $(( ${SILENT}%3 )) -eq 0 ]]; then
                SILENT=$(( ${SILENT}/3 ))
                # If no-interaction is disabled, then disable warnings too
                [[ "${SILENT}" -eq 5 ]] && SILENT=1
            else
                SILENT=$(( ${SILENT}*3 ))
            fi;;
    [tT])   # Interactive/non-interactive mode
            if [[ $(( ${SILENT}%2 )) -eq 0 ]]; then
                SILENT=$(( ${SILENT}/2 ))
                # If _silent (3) is disabled, then disable warnings too
                [[ "${SILENT}" -eq 5 ]] && SILENT=1
            else
                SILENT=$(( ${SILENT}*2 ))
            fi;;
    [wW])   # Show no warnings in (non-)interactive setup
            if [[ $(( ${SILENT}%5 )) -eq 0 ]]; then
                SILENT=$(( ${SILENT}/5 ))
            elif [[ "$SILENT" -gt 1 ]]; then
                SILENT=$(( ${SILENT}*5 ))
            else
                die "$answer: Invalid option!
    This option is enabled when either Silent or Non-interactive mode is on"
            fi;;
    [xX])   [[ "$DVI_VIEWER" ]] || \
                die "$answer: Invalid option!
    This option will be enabled when you set a dvi viewer in the config
    file $blue$config_dir/$config_file$normal"
            if [[ -f "$file.dvi" ]]; then
                # dvips error messages should not mess up terminal
                [[ "$file.dvi" -ot "$filename" ]] && {
                    echo
                    Err -w \
                    "The TEX file has been modified since this DVI was created"
                    sleep "$SLEEP_TIME"
                }
                if [[ "$edit_cmd" ]]; then
                    # edit_cmd is nonempty if xdvi is used
                    $DVI_VIEWER $DVI_VIEWER_OPTIONS -editor "$edit_cmd" \
                        "$file".dvi >& /dev/null &
                else
                    $DVI_VIEWER $DVI_VIEWER_OPTIONS "$file".dvi >& /dev/null &
                fi
                [[ $? -ne 0 ]] && Err "Error in launching ${DVI_VIEWER}"
            else    Err "$file.dvi does not exist!"
            fi ;;
    "" | [yY])  compile "$MODE" ;;
    *)      die "$answer: Invalid Option!" ;;
    esac

done

clean_files
