#!/bin/bash

        ###     This program is used to compile latex files       ###
        #                                       -ppurka             #
        #-----------------------------------------------------------#


        ###                     Changelog                         ###
        # 01/18/2010    Updated help text to remove xpdf.           #
        #               Fixed btex_editor="custom" to not warn.     #
        #               Fixed switching on/off inv. search with some#
        #               editor other than gvim.                     #
        # 12/20/2009    Added option -A to allow one to check status#
        #               of all .tex files in current dir by inotify-#
        #               wait. This allows one to have \include in   #
        #               main file and still have autocompile working#
        # 10/11/2009    Fixed a bug with a stray $DELAY remaining.  #
        # 07/21/2009    Added support for polled autocompile mode!  #
        #               This had been on the TODO for months!       #
        # 07/15/2009    Added support for editors other than gvim   #
        #               Fixed bugs in set_xdvi and in enabling of   #
        #               inverse search.                             #
        #               Fixed some errors in help text.             #
        # 07/13/2009    Much better sed expressions. Also fixed a   #
        #               misinformation in the help text. Finally,   #
        #               added possibility of passing additional opts#
        #               to (pdf)latex and set PAPER type in config  #
        #               Now, we o/p which # of compile is running   #
        # 07/11/2009    Added an INOTIFY_DELAY to take care of 'file#
        #               not found' errors.                          #
        # 06/24/2009    Abstracted out latex and pdflatex commands  #
        #               Changed text in menu so that it is clear    #
        #               what viewer is tied to which file format    #
        #               This reduces ambiguity of commands in the   #
        #               case where the same viewer is used for all  #
        #               or a multiple number of the file formats    #
        # 02/21/2009    Enabled autodetection of bibliography in tex#
        #               file. This not quite complete and checks for#
        #               specific strings in the latex file.         #
        #               Need to do bibtex and other biblio options  #
        # 11/17/2008    Enabled autodetection of beamer in tex file #
        #               Also, changed menu to show enable/disable   #
        #               instead of the generic 'toggle'             #
        # 10/20/2008    Enabled both ps generation as well as pdf   #
        #               generation via pdflatex using one command   #
        #               There is also a command line switch for it  #
        # 10/11/2008    Some warnings if pdf/ps/dvi files are older #
        #               than the latex file                         #
        #               Use config file for *VIEWER* options        #
        # 09/28/2008    Added -watchfile 1 option to xdvi. A new    #
        #               variable DVI_VIEWER_OPTIONS takes care of   #
        #               these additional options                    #
        #               Also introduced P{S,DF}_VIEWER_OPTIONS      #
        # 06/02/2008    Cleanups. Now the menu changes depending on #
        #               the options that are available              #
        # 05/30/2008    Support for -interaction=nonstopmode w/ or  #
        #               without colored output for errors as well   #
        #               as warnings                                 #
        #               Renamed quiet to silent to better match w/  #
        #               the menu options                            #
        # 04/21/2008    Support for bibtex, slight reorganization   #
        # 03/31/2008    Enabled inverse search for all latex files  #
        #               through the -src-specials command option    #
        #               This means that srcltx is not reqd. now     # 
        #               Rewrote help and provided command line opt. #
        # 02/28/2008    Fixed bugs in set_xdvi which was being used #
        #               to enable inverse search in xdvi            #
        #               Fixed bugs in autocompile WAITTIME          #
        #               Disabled autocompile option if inotifywait  #
        #               is not available                            #
        # 02/26/2008    Enabled inverse search through xdvi & gvim  #
        # 12/30/2007    Code rearrangement and                      #
        #               FULL autocompile mode! :D                   #
        # 12/25/2007    Allow one to execute it by clicking on the  #
        #               file in rox                                 #
        #               Better help text                            #
        # 12/20/2007    Amazing article online enables me to get    #
        #               the status of each part of a pipe, so now   #
        #               error checking works very nice even with    #
        #               the grep command (in SILENT mode)           #
        # 11/24/2007    Rudimentary autocompile mode                #
        # 11/20/2007    Pretty output :P                            #
        #               New pattern for grep to capture more errors #
        # 10/10/2007    Enabled a silent mode (reduces junk o/p)    #
        #               Enabled Toggling the silent mode            #
        #               Reorganized menu and help text              #
        # 04/28/2007    Enabled method to convert ps to pdf         #
        # 02/??/2007    Enabled an option to support beamer         #
        # 01/??/2007    Enabled a "non-stop" mode                   #
        # <=01/01/2007  Umpteen number of untracked changes         #
        #  early 2006?  First version of the script                 #
        #-----------------------------------------------------------#

        ###                         TODO (04/28/2007)             ###
        # Enable a silent mode, where only latex errors are shown   #
        #   need to look into --interaction nonstopmode             #
        #   and make the latex compilation handling more modular    #
        # The above is done, but without --interaction nonstopmode  #
        # would be interesting to see if it can be improved.        #
        # --- DONE, with caveat: the output is colored but all the  #
        # lines get colored. It would be nice to have  warning or   #
        # error's only first lines to get colored. Can't seem to    #
        # find a sed command which can do this:                     #
        # /start/,/end/{ color only first line of this para }       #
        #                                                           #
        # Enable an auto mode, where the latex file will be         #
        # automatically compiled whenever the timestamp of the tex  #
        # file changes  --- DONE!                                   #
        #                                                           #
        # Bibliography: Check for other means of calling biblio     #
        #               Check for \input{file} and check file for   #
        #               bibliography content                        #
        # Bibtex:       Check for bibtex autodetection              #
        #               Also, need to look for \input{file}, etc    #
        #-----------------------------------------------------------#

. `which my_bash_functions 2> /dev/null` || {
    echo -e " \x1b[1;31mError!\x1b[0m The script \x1b[1;32mmy_bash_functions\
\x1b[0m was not found in your \$PATH
        Please ensure that the script is available and executable"
    exit 1
}

# Source the readfilename
. `which my_read_files 2> /dev/null` || {
    echo -e " \x1b[1;31mError!\x1b[0m The script \x1b[1;32mmy_read_files\
\x1b[0m was not found in your \$PATH
        Please ensure that the script is available and executable"
    exit 1
}

setup_config_file() {
    info "$cyan$config_dir/$config_file$normal config file not found. Creating ..."
    [[ ! -d "$config_dir" ]] && {
        mkdir -p "$config_dir" || die "Could not create $config_dir"
    }
    cat <<END > "$config_dir/$config_file"
# btex config file
# PS (POSTSCRIPT) file viewer,- uncomment or add a viewer
# Default is empty.
# PS_VIEWER=gv
# PS_VIEWER=kghostview
# PS_VIEWER=okular
# PS_VIEWER=evince
#
# PS viewer options,- the following are for gv
# Default is empty.
# PS_VIEWER_OPTIONS="-watch -spartan"
# 
# PDF file viewer,- uncomment or add a viewer
# Default is empty.
# PDF_VIEWER=xpdf
# PDF_VIEWER=kpdf
# PDF_VIEWER=okular
# PDF_VIEWER=evince
# PDF_VIEWER=gv
# PDF_VIEWER=kghostview
#
# PDF viewer options,- the following are for xpdf
# Default is empty.
# PDF_VIEWER_OPTIONS="-q"
#
# DVI file viewer,- uncomment or add a viewer
# Default is empty.
# DVI_VIEWER=xdvi
# DVI_VIEWER=kdvi
# DVI_VIEWER=okular
# DVI_VIEWER=evince
#
# DVI viewer options,- following are for xdvi
# Default is empty.
# DVI_VIEWER_OPTIONS="-watchfile 1"
#
# Default programs, first one is for ps, second is for pdf
# Default is LaTeX=latex and PDFLaTeX=pdflatex.
# LaTeX=latex
# PDFLaTeX=pdflatex
#
# Extra options used by LaTeX and PDFLaTeX. Default is empty.
# LaTeX_Opts=""
# PDFLaTeX_Opts=""
# Suggested Options:
# LaTeX_Opts="-file-line-error"
# PDFLaTeX_Opts="-file-line-error"
#
# Paper type used in creating ps from dvi. This is used by dvips
# Default is letter
# PAPER=letter
#
# Editor to be used with xdvi for inverse search. Use -h editor for more
# information on how to set up.
# Default is gvim
# btex_editor=gvim
#
# Delay used in inotifywait. This delay takes care of the time for which
# the file is actually written to the disk. There are some issues with the
# file not being found by (pdf)latex if the delay is too small.
# Modify it to a larger value if the autocompile mode is aborted because
# of "file not found" messages.
# The delay is in seconds. Fractional values are possible. Default is 0.5
# INOTIFY_DELAY=0.5
#
# Polled autocompile mode. Use this mode if inotifywait is not installed
# and you either can not install it or you don't want to install it!
# Set POLLED_AUTOCOMPILE to a non-zero integer. The value of the integer
# determines the polling interval,- the number of seconds we will wait
# before checking again whether the latex file has been modified.
# If this variable is set to a non-zero integer and inotifywait is also
# installed, then inotifywait will be used.
# Default is empty.
# POLLED_AUTOCOMPILE=1
END
    info "Set up your PS, PDF and DVI viewers in \
$cyan$config_dir/$config_file$normal"
    exit 0
}

config_dir=$HOME/.config
config_file="${0##*\/}.config"
# Source the config file
if [[ -f "$config_dir/$config_file" ]]; then
    . "$config_dir/$config_file"
else
    setup_config_file
fi

# Some default viewers, need to have pdf_viewer since we take acroread in
# command line option.
PS_VIEWER="${PS_VIEWER:?$(die Set ps viewer in $config_dir/$config_file)}"
PDF_VIEWER="${PDF_VIEWER:-${pdf_viewer:?$(die Set pdf viewer in $config_dir/$config_file)}}"
DVI_VIEWER="${DVI_VIEWER:?$(die Set dvi viewer in $config_dir/$config_file)}"
# Commands: if they have been modified
: ${LaTeX:=latex}
: ${PDFLaTeX:=pdflatex}
: ${PAPER:=letter}
# Delay for inotifywait
: ${INOTIFY_DELAY:=0.5}
: ${POLLED_AUTOCOMPILE:=0}

# check <program name> [info|Err|die] [<*_VIEWER>]
# If *_VIEWER is present in argument then it must be $3
check() {
    local INFO=die
    local exe="$(which $1 2>/dev/null)"
    [[ $2 ]] && INFO=$2
    if [[ ! -x "$exe" && $3 ]]; then
        $INFO "You don't seem to have $bold$1$normal installed.\
 Is your \$PATH set up correctly?
        Modify $config_dir/$config_file with the correct ${3%_*} viewer"
        return 1
    elif [[ ! -x "$exe" ]]; then
        $INFO "You don't seem to have $bold$1$normal installed."
        return 1
    fi
    CHECKED=$exe
    return 0
}
    
DVIPS_PAPER_OPTIONS="-t$PAPER"
check $DVI_VIEWER die DVI_VIEWER
check $PDF_VIEWER die PDF_VIEWER
check $PS_VIEWER die PS_VIEWER
RECURSIVE=0
# By default use non-stop mode, i.e. script will not exit on latex error
NON_STOP=1; 
# Possible values of SILENT are:
#   _no-interaction_silent: latex is compiled with above and only warning/err
#                         are shown
#   _no-interaction: latex is compiled with --interaction nonstopmode
#   _silent:  latex is compiled as usual and warning/err are shown and latex
#           stops at errors
#   _no-interaction_silent_nowarning:
#   _no-interaction_nowarning:
#   _silent_nowarning:
#       Same as above, except that warnings are not shown
#   <none>: latex is compiled as if it is typed as latex <file>.tex
SILENT=
COUNT=1
INOTIFYFILES=           # Set it to "*.tex" to check status of all .tex
INVERSE_SEARCH=         # Command line option when inv search is enabled
INVERSE_SEARCH_CAPABLE= # non-empty if latex takes -src-specials argument
XPDF_OPTIONS=
SLEEP_TIME=1
# Possible modes: 
#   PS2PDF:         PDF is generated from PS using ps2pdf
#   POSTSCRIPT:     Only PS is generated
#   ASK_POSTSCRIPT: DVI is generated, user is asked if PS is wanted
#   NO_POSTSCRIPT:  Only DVI is generated
#   PDF:            PDF is generated using pdflatex
#   PDF_POSTSCRIPT: PDF is generated using pdflatex && PS is generated
#   Default is below
MODE="ASK_POSTSCRIPT" 

help(){ #{{{
    echo
    echo -e " $yellow ${0##*\/}:$normal"
    case "$1" in
        "inv-search")   info "${bold}Inverse search:$normal
    - Inverse search is the feature by which one can access the
      corresponding line in an editor by clicking in the viewer (used to
      view the latex output).
    - In this script, inverse search feature can be used if one is using
      gvim and the tex file is open in a gvim editor. The script
      automatically determines the correct gvim if multiple gvims are running.
    - The dvi viewer which is automatically set up by this script is xdvi.
      Other dvi viewers will need to be configured separately.
    - If you use okular, then inverse search may be possible even in 
      pdf files. Search Google for pdfsync and okular.
      " 
        return ;;
        "editor")       info "${bold}Editor:$normal
    If you have set your dvi viewer to xdvi, then this script supports
    enabling inverse search in xdvi.
    The editors which are automatically configured to work with the inverse
    search of xdvi are any of the vim/gvim variant.
    
    You can set the editor permanently in $cyan$config_dir/$config_file$normal
    by setting the ${bold}btex_editor$normal variable.
    You can temporarily set some vim/gvim variant other than the one set in
    the config file by using the --editor argument to $yellow${0##*\/}$normal

    If you want inverse search with some other editor, then do the following:
    - Create your own script named:
      $cyan$config_dir/btex_custom_editor$normal
    - Ensure that the only output of the script is the editor command that
      is to be passed to xdvi.
    - Set ${bold}btex_editor=custom$normal in:
      $cyan$config_dir/$config_file$normal
    "
        return;;
    esac

    info "This program is used to compile latex files and output ps/pdf files"
    info "Usage:     ${0##*\/} [<options>] [<filename>.tex]"
    info "Options:
    -2 | --ps2pdf         Generate pdf from postscript output
    -a | --acroread       Use acrobat reader as pdf viewer in lieu of ${PDF_VIEWER##*/}
    -A | --all-tex        Run autocompile mode on all .tex files instead of
                          just on the file provided in command line
    -B | --bibtex         Enable bibtex compilation
    -c | --choose4me      Choose some default settings: -i -n -r -s -T
    -d | --pdf            Output a pdf file,- this uses $PDFLaTeX
    -e | --beamer         Toggle beamer mode: disable $DVIPS_PAPER_OPTIONS option in dvips
    -E | --editor <editor> Provide an editor to be used with xdvi for
                          inverse search. Use '-h editor' to get more help
    -h | --help           This help text
    -h editor             Provide information on set-up of editor for inverse
                          search with xdvi
    -h inv-search         Help information on inverse search
    -i | --inv-search     Enable inverse search in dvi
    -n | --no-postscript  Output only dvi file
    -nc| --no-color       Do not use color in output
    -o | --pdf_ps         Generate ps automatically and also pdf via $PDFLaTeX
    -p | --postscript     Run dvips automatically, providing ps output
    -r | --recursive      Recursively compile the source. Otherwise
                          the program will compile once and exit
    -s | --silent         Print only errors/warnings output by $LaTeX/$PDFLaTeX
    -t <paper type>       Run dvips with -t<paper type> option.
                          Default paper type used is ${bold}letter${normal}
    -T | --no-interaction Run $LaTeX/$PDFLaTeX with -interaction=nonstopmode
    -z | --stop           Exit script if $LaTeX gives errors
    "
    info "If multiple -d,-n,-o,-p,-2 are given then the last one will be used
    "
    info "If no filename is given, then an interactive input prompt is provided
    ${underline}An example, when using beamer${normal}:
    btex -e -d -r -s    # recursive, silent, using $PDFLaTeX & beamer
    "
} #}}}




set_xdvi() { # {{{
    # The following algo for gvim runs only if btex_editor is empty or it
    # has been set to gvim
    # Enter gvim --remote here:
    #   determine if only one gvim is running, if so take that as the remote
    #   else: check to see if multiple gvim's are running
    #       if yes: check to see if the $file has servername with its gvim
    #       else:   discard all lines with servername
    #               check the order $o of the $file in ps output => GVIM$o
    #       else:   file is not open, can't do anything.
    #   else: file is not open, can't do anything.
    [[ ${DVI_VIEWER/xdvi/} = $DVI_VIEWER ]] && return
    
    # If btex_editor is non-empty then start using it
    if [[ "$btex_editor" = "custom" ]]; then
        # Nothing to do here
        echo -n ""
    elif [[ "$btex_editor" ]]; then
        which $btex_editor >& /dev/null  || {
            Err -w "$cyan$btex_editor$normal is not in your \$PATH.
    I hope the name is correctly specified."
            sleep $SLEEP_TIME
        }
    elif which gvim >& /dev/null; then
        btex_editor="gvim"
    else
        Err -w "No editor is set and gvim is not found. Inverse search with
    xdvi will not work."
        return
    fi
    local TMP_FILE _editor="${btex_editor##*\/}"
    TMP_FILE="$(mktemp /tmp/btex.XXXX)" || TMP_FILE=/tmp/$UID.btex
    case "$_editor" in
        custom)     # This is the custom editor. The output of the script
                    # that is run should contain the editor command to be 
                    # passed to xdvi. The script to be run should be 
                    # $config_dir/btex_custom_editor
            if [[ -x "$config_dir/btex_custom_editor" ]]; then
                edit_cmd="$( $config_dir/btex_custom_editor )"
            else    # Else make this variable empty.
                edit_cmd=""
            fi;;
        ""|gvim|rgvim|gview|rgview|eview|vim|rview|evim|*vimdiff)
            # If the variable btex_editor is empty then we will
            # just search for *vim. The result will be non-empty
            # editor output for xdvi only if *vim is running and it
            # has the required latex file opened.
            local server
            ps -u $USER -o command | grep -vw "grep" | \
                grep -E "[/]?${_editor}"  > $TMP_FILE
            if grep "$filename" $TMP_FILE | grep -q "\-\-servername"; then
                server="$(grep -E \
                "($filename\ .*\-\-servername|\-\-servername\ .*$filename)" \
                $TMP_FILE | sed -ne \
                "s@^.*\-\-servername[[:space:]]\+\([[:alnum:]]*\) .*@\1@p")"
            elif grep -q "$filename" $TMP_FILE; then
                # Hopefully there aren't two files of the same name open :S
                # If xdvi is already running, having been started from
                # gvim, then it should be having the --servername command
                # embedded in it. In this case the previous if will succeed
                # and we will get the correct gvim
                server="$(grep -ns "$filename" $TMP_FILE)"
                # The following line will get the first one, if there are
                # multiple files with same name open.
                server=${server%%:*}
                server="$($btex_editor --serverlist | tail -n +$server | \
                    head -n 1)"
                if [[ "$server" ]]; then
                    edit_cmd="$btex_editor --servername $server --remote +%l %f"
                else
                    Err -w "Either the file $filename is not open, or the filename
    was not presented in the command line while opening gvim.
    Couldn't determine the gvim server which has the file open. Inverse
    search will not work."
                    edit_cmd=""
                fi
            fi ;;
            *)  Err "$_editor: Unknown editor. There is no support for this
    editor in $yellow${0##*\/}$normal."
            sleep $SLEEP_TIME
            help "editor";;
        esac
        rm -f $TMP_FILE
}
# }}}

set_beamer_options() {
    if [[ $DVIPS_PAPER_OPTIONS ]]; then
        DVIPS_PAPER_OPTIONS=""
        [[ $PDF_VIEWER = *xpdf ]] && XPDF_OPTIONS="-z 200"
    else
        DVIPS_PAPER_OPTIONS="-t$PAPER"
        [[ $PDF_VIEWER = *xpdf ]] && XPDF_OPTIONS=
    fi
}


#echo $-
if [[ $DISPLAY && -z "$@" ]] && ! tty -s; then 
    xterm -hold -e $0 -h; exit
fi

until [[ -z "$1" ]]; do
    case "$1" in
    -2 | --ps2pdf)      MODE="PS2PDF";;
    -a | --acroread)    check acroread && PDF_VIEWER="$CHECKED";;
    -A | --all-tex)     INOTIFYFILES="*.tex" ;;
    -B | --bibtex)      check bibtex && BIBTEX=1;;
    -c | --choose4me)   # Choose a default set of options automatcially
        # -i -n -r -s -T
        INVERSE_SEARCH="-src-specials"
        MODE="NO_POSTSCRIPT"
        RECURSIVE=1
        [[ $SILENT = *_silent ]] || SILENT=${SILENT}_silent
        [[ $SILENT = _no-interaction* ]] || SILENT=_no-interaction$SILENT;;
    -d | --pdf)         MODE="PDF";;
    -e | --beamer)      set_beamer_options;;
    -E | --editor)      btex_editor="$2"; shift ;;
    -h | --help)        help "$2"; exit ;;
    -i | --inv-search)  INVERSE_SEARCH="-src-specials" ;;
    -n | --no-postscript) MODE="NO_POSTSCRIPT";;
    -nc| --no-color)    unset ${COLORS[@]} ;;
    -o | --pdf_ps)      MODE="PDF_POSTSCRIPT";;
    -p | --postscript)  MODE="POSTSCRIPT";;
    -r | --recursive)   RECURSIVE=1 ;;
    -s | --silent)      [[ $SILENT = *_silent ]] || SILENT=${SILENT}_silent;;
    -t) [[ $2 = -* ]] && die "$2: Invalid paper type to -t option"
        PAPER=$2; DVIPS_PAPER_OPTIONS=-t$PAPER; shift;;
    -T | --no-interaction) [[ $SILENT = _no-interaction* ]] ||\
        SILENT=_no-interaction$SILENT;;
    -z | --stop)        unset NON_STOP ;;
    -*) help; die "${red}$1${normal}: Invalid Option!\n" ;;
    *)  filename="$1" ;;
    esac
    shift
done

# check for command line acroread option: if the viewers are different then
# set PDF_VIEWER_OPTIONS to null
[[ "$pdf_viewer" != "$PDF_VIEWER" ]] && PDF_VIEWER_OPTIONS=

show_menu() { # {{{
    echo; echo
    local g=$green n=$normal
    local auto warn inv \
        non_int="Enable" \
        silnt="Enable Silent mode            " \
        bmr="Enable Beamer mode            " \
        bibtx="Enable"
    [[ $INOTIFYWAIT || $POLLED_AUTOCOMPILE -gt 0 ]] && \
        auto="    ${g}A${n}: Enable Autocompile mode\n"
    [[ $SILENT ]] && warn="${g}W$n: Enable output of warnings"
    [[ $INVERSE_SEARCH_CAPABLE ]] && inv="\n    ${g}I$n: Enable Inverse search"

    infon "${bold}Current mode$n:${blue}"
    case $MODE in
        ASK_POSTSCRIPT) echo -e "\tPostscript file is generated after confirmation";;
        NO_POSTSCRIPT)  echo -e "\tOnly DVI file is generated";;
        POSTSCRIPT)     echo -e "\tPostscript file is automatically generated";;
        PS2PDF)         echo -e "\tPDF file is generated from PS, using ps2pdf";;
        PDF)            echo -e "\tPDF file is generated using $PDFLaTeX";;
        PDF_POSTSCRIPT) echo -e "\tPS file + PDF file generated via $PDFLaTeX";;
    esac
    case $SILENT in
        _no-interaction_silent_nowarning) 
            non_int="Disable"
            silnt="Disable Silent mode           "
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tOnly errors in $LaTeX output are shown";;
        _no-interaction_nowarning)
            non_int="Disable"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tErrors in $LaTeX output are highlighted";;
        _silent_nowarning) 
            silnt="Disable Silent mode           "
            echo -e "\t\t\tOnly errors in $LaTeX output are shown";;
        _no-interaction_silent)
            non_int="Disable"
            silnt="Disable Silent mode           "
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tOnly errors/warnings in $LaTeX output are shown";;
        _no-interaction)
            non_int="Disable"
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tNon-interactive mode is enabled"
            echo -e "\t\t\tErrors/warnings in $LaTeX output are highlighted";;
        _silent) 
            silnt="Disable Silent mode           "
            warn="${warn/Enable/Disable}"
            echo -e "\t\t\tOnly errors/warnings in $LaTeX output are shown";;
        *)  ;;
    esac

    [[ $INVERSE_SEARCH ]] && {
        echo -e "\t\t\tInverse search is enabled"
        inv="${inv/Enable/Disable}"
    }
    [[ $BIBTEX ]] && {
        echo -e "\t\t\tBibtex compilation is enabled"
        bibtx="Disable"
    }
        
    [[ $DVIPS_PAPER_OPTIONS ]] || {
        echo -e "\t\t\tBeamer mode is enabled"
        bmr="Disable Beamer mode           "
    }
    # This lower part has an ugly long string argument
    infon "Want to continue with another compile?
    Enter/${g}Y$n: Yes (Repeat compile)     ${g}N$n: No (${g}Q${n}uit)
    ${g}P$n: Toggle Postscript output       ${g}L$n: Launch ps viewer \
(${PS_VIEWER##*\/})
    ${g}D$n: Toggle Pdf Output              ${g}X$n: Launch dvi viewer \
(${DVI_VIEWER})
    ${g}2$n: Toggle PS to PDF output        ${g}F$n: Launch pdf viewer \
(${PDF_VIEWER})
    ${g}O$n: Toggle both PS and PDF output
    ${g}E$n: $bmr ${g}B$n: $bibtx Bibtex compilation \
$inv
    ${g}T$n: $non_int non-interactive compilation
    ${g}S$n: $silnt $warn
$auto" # if auto is empty, this acts as a \n, o/w auto provides \n

    echo -ne " $yellow*$normal Give an option (2/"
    [[ $auto ]] && echo -ne "A/"
    echo -ne "B/D/E/F/"
    [[ $inv ]] && echo -ne "I/"
    echo -ne "L/N/O/P/Q/S/T/"
    [[ $warn ]] && echo -ne "W/"
    echo -ne "X/[Y]): "
}
# }}}

success() {
    ([[ $1 -ne 0 ]] && echo -e "${red}Failed!${normal}") ||\
        echo -e "${green}Done!${normal}"
}

run_bibtex() { # {{{
    infor "Running bibtex"
    if [[ $SILENT ]]; then
        bibtex --terse $file
        [[ $? -ne 0 && -z $NON_STOP ]] && die "$filename: bibtex failed"
    else
        bibtex $file
        [[ $? -ne 0 && -z $NON_STOP ]] && die "$filename: bibtex failed"
    fi
} # }}}

run_latex() { # {{{
    local status
    infor "$cyan$1$normal run of $LaTeX"
    case $SILENT in
        _no-interaction_silent_nowarning)
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            $filename >&1 | sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction_nowarning)
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            $filename >&1 | sed -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status=${PIPESTATUS[0]};;
        _silent_nowarning) 
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH $filename >&1 | \
            sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction_silent)
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            $filename >&1 | sed -ne \
                "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction)
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH -interaction=nonstopmode \
            $filename >&1 | sed -e \
                "/Warning/,/^$/s/\(.*\)/$pink\1$normal/" \
                -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status=${PIPESTATUS[0]};;
        _silent) 
            $LaTeX $LaTeX_Opts $INVERSE_SEARCH $filename >&1 | \
            sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        *)  $LaTeX $LaTeX_Opts $INVERSE_SEARCH $filename
            status=$? ;;
    esac

    if [[ $status -ne 0 && -z $NON_STOP ]]; then 
        die "${filename}: Error in $LaTeX compilation"
    else
        return $status
    fi
} # }}}

run_pdflatex() { # {{{
    local status
    infor "$cyan$1$normal run of $LaTeX"
    case $SILENT in
        _no-interaction_silent_nowarning)
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode $filename \
            >&1 | sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction_nowarning)
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode $filename \
            >&1 | sed -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status=${PIPESTATUS[0]};;
        _silent_nowarning) 
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH $filename >&1 | \
            sed -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction_silent)
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode $filename \
            >&1 | sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        _no-interaction)
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH \
            -interaction=nonstopmode $filename \
            >&1 | sed -e "/Warning/,/^$/s/\(.*\)/$pink\1$normal/" \
                -e "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/" \
                -e "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/"
            status=${PIPESTATUS[0]};;
        _silent) 
            $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH $filename >&1 | \
            sed -ne "/Warning/,/^$/s/\(.*\)/$pink\1$normal/p" \
                -ne "/^[!?] /,/^$/s/\(.*\)/$red\1$normal/p" \
                -ne "/$filename:[0-9]\+:/,/^$/s/\(.*\)/$red\1$normal/p"
            status=${PIPESTATUS[0]};;
        *)  $PDFLaTeX $PDFLaTeX_Opts $INVERSE_SEARCH $filename
            status=$? ;;
    esac

    if [[ $status -ne 0 && -z $NON_STOP ]]; then
        die "${filename}: $PDFLaTeX compilation failed"
    else
        return $status
    fi
} # }}}

compile_ps() { #{{{
    run_latex "1st" || return
    if [[ $BIBTEX ]]; then
        run_bibtex; run_latex "2nd"; run_latex "3rd"
    elif [[ $BIBLIOGRAPHY ]]; then
        # If it has come till here, then latex ran ok earlier
        # So, we don't need to return on error
        run_latex "2nd"; run_latex "3rd"
    fi

    case $1 in
        ask)echo; infon "CONTINUE with dvips?[enter/y or n]:"
            read -n 1 answer;echo;;
        only_dvi) answer="n";;
        *)  answer="y";;
    esac
    case $answer in
        "" | [yY]*) infon "Creating $file.ps ... ";#echo
            dvips ${DVIPS_PAPER_OPTIONS} -q -o "$file.ps" "$file.dvi"
            success $? ;;
        *) ;; # Do nothing
    esac
} #}}}

compile_pdf() { # {{{
    info "Converting the (newer) eps images to pdf ..."
    find *.eps 2>/dev/null | while read i; do
        if [[ "${i%\.*}.pdf" -ot "$i" ]]; then
            infon "Converting ${bold}$i${normal} to ${bold}${i%\.*}.pdf${normal} ... "
            epstopdf $i --outfile="${i%\.*}.pdf"
            success $?
        fi
    done
    run_pdflatex "1st" || return
    if [[ $BIBTEX ]]; then
        run_bibtex; run_pdflatex "2nd"; run_pdflatex "3rd"
    elif [[ $BIBLIOGRAPHY ]]; then
        # If it has come till here, then pdflatex ran ok earlier
        # So, we don't need to return on error
        run_pdflatex "2nd"; run_pdflatex "3rd"
    fi
}
# }}}

compile() { # {{{
    case $1 in
        ASK_POSTSCRIPT) compile_ps ask ;;
        POSTSCRIPT)     compile_ps ;;
        NO_POSTSCRIPT)  compile_ps only_dvi;;
        PDF)        compile_pdf;;
        PS2PDF)     compile_ps
            infon "Creating $file.pdf from $file.ps ... "
            ps2pdf $file.ps
            success $?;;
        PDF_POSTSCRIPT) compile_ps
            compile_pdf;;
        *)  ;;
    esac
} # }}}

autocompile() { # {{{
    local MODE=$1
    local TOTAL=$2
    local clr="$(tput el)"
    if [[ "$INOTIFYWAIT" ]]; then
        [[ "$INOTIFYFILES" ]] || INOTIFYFILES="$filename"
        for (( i=1; i<=$TOTAL; i+=1 )); do
            infor "${blue}Waiting$normal for change in the status of file ..."
            if $INOTIFYWAIT -t $WAITTIME -qq $INOTIFYFILES; then
            # Use above line if you want to break out of autocompile after
            # some time, say 300s, if no modifications are made for 300s.
            # Otherwise use following line
            #if inotifywait -qq ${filename}; then
                info "Autocompile # $i/$TOTAL$clr"
                # Sleep for a brief period while the file gets written to
                # disk. Otherwise file is sometimes not found on the disk
                sleep $INOTIFY_DELAY
                compile $MODE
            else
                info "${red}Abort autocompile${normal}: No change in status of file for over $WAITTIME seconds"
                return
            fi
        done
    elif [[ "$POLLED_AUTOCOMPILE" -ne 0 ]]; then
        local t=0 LAST_MOD=0 TMP_FILE
        TMP_FILE="$(mktemp /tmp/btex.XXXX)" || TMP_FILE=/tmp/$UID.btex
        for (( i=1; i<=$TOTAL; i+=1 )); do
            infor "${blue}Waiting$normal for change in the status of file ..."
            LAST_MOD="$(ls -l --full-time $filename | \
                awk '{ print $6" "$7 }')"
            touch -d "$LAST_MOD" $TMP_FILE
            while [[ ! $filename -nt $TMP_FILE && $t -le $WAITTIME ]]; do
                [[ $WAITTIME -gt 0 ]] && ((t++))
                sleep $POLLED_AUTOCOMPILE
            done
            if [[ $t -le $WAITTIME ]]; then
                info "Autocompile # $i/$TOTAL$clr"
                sleep $INOTIFY_DELAY
                compile $MODE
            else
                info "${red}Abort autocompile${normal}: No change in status of file for over $WAITTIME seconds"
                rm $TMP_FILE
                return
            fi
        done
        rm $TMP_FILE
    fi
}
# }}}

# Some error checking
check $LaTeX
[[ "$MODE" = *POSTSCRIPT || $MODE = PS2PDF ]] && check dvips
[[ "$MODE" = "PDF" ]] && check $PDFLaTeX && check epstopdf


if [[ -z ${filename} ]]; then
    read_filename 1 tex
    filename="$FILEPATH"
    unset FILEPATH
fi


if [[ ! -f "${filename}" || "${filename/ /}" != "${filename}" ]]; then
    echo; die "${filename} does not exist
    Do not enter filenames with spaces in them\n"
fi

# Change to the directory containing the tex file, else a lot will go awry
[[ $filename = */* ]] && cd "${filename%\/*}"
filename="${filename##*\/}"
file="${filename%\.tex}"

# Autodetect beamer mode
if [[ "$DVIPS_PAPER_OPTIONS" ]] && \
    grep -q -s "[ ]*\\documentclass.*beamer" $filename; then
    info "Detected beamer: enabling beamer mode"
    set_beamer_options
    sleep $SLEEP_TIME
fi

# Autodetect bibliography - not quite complete - also need auto-bibtex
# Need to check for \input{filename} which contains bibliography
# information
if grep -q -s \
    '^[[:space:]]*\\begin[[:space:]]*{[[:space:]]*thebibliography[[:space:]]*}'\
    $filename || \
    grep -q -s '^[[:space:]]*\\bibliography[[:space:]]*{[^}]*}' $filename;
then
    info "Detected bibliography in $filename.
    $LaTeX/$PDFLaTeX will be run thrice"
    BIBLIOGRAPHY=1
    sleep $SLEEP_TIME
fi


# Compile the file with command line parameters
compile $MODE
[[ $RECURSIVE -eq 0 ]] && exit

# Check for the presence of inotifywait
if check inotifywait Err; then
    INOTIFYWAIT=$CHECKED
elif [[ $POLLED_AUTOCOMPILE -eq 0 ]]; then
    echo -e "\
  $red+-----------------------------------------------------------+
  |                                                           |
  | ${bold}inotifywait$normal not found. Autocompile mode will be disabled  $red|
  |                                                           |
  |$normal If you want to enable polled autocompile, then set the    $red|
  |$normal variable POLLED_AUTOCOMPILE in the config file to a       $red|
  |$normal non-zero integer. The integer will determine the polling  $red|
  |$normal interval (in seconds),- the number of seconds we will wait$red|
  |$normal before checking whether the latex file has been modified. $red|
  |                                                           |
  +-----------------------------------------------------------+$normal"
  sleep $SLEEP_TIME
else
    echo -e "\
  $red+-----------------------------------------------------------+
  |                                                           |
  | ${bold}inotifywait$normal not found. Polled autocompile mode is enabled $red|
  |                                                           |
  |$normal Polling interval is $yellow$POLLED_AUTOCOMPILE$normal seconds.                            $red|
  |$normal Polled autocompile mode is slightly slower than inotify.$red  |
  |$normal So, be patient!                                         $red  |
  |                                                           |
  +-----------------------------------------------------------+$normal"
fi

# Determine if the (pdf)latex has -src-specials command line option
if $LaTeX -help | grep -q "^-src-specials"; then
    INVERSE_SEARCH_CAPABLE=1
    [[ "$INVERSE_SEARCH" ]] && set_xdvi
fi

# Now, enter recursion
while true; do

    show_menu
    read -n 1 answer; echo
    case $answer in         # Options arranged alphabetically
    2)      MODE="PS2PDF"; compile "PS2PDF";;
    [aA])   [[ "$INOTIFYWAIT" || $POLLED_AUTOCOMPILE -ne 0 ]] || \
            die "$answer: Invalid option!
    This option will be enabled when you have either inotifywait present,
    or you have POLLED_AUTOCOMPILE set to a non-zero integer in the config.
    "
            info "Autocompile mode ${bold}Enabled${normal}"
            infon "No. of times you want to compile automatically [default: 5]:"
            read answer; [[ $answer && $answer -gt 0 ]] || answer=5
            infon "No. of secs of wait-time before autocompile aborts [default: 300]:"
            read WAITTIME; [[ $WAITTIME && $WAITTIME =~ ^[0-9]+$ ]] || WAITTIME=300
            autocompile $MODE $answer;;
    [bB])   if [[ -z $BIBTEX ]]; then
                check bibtex && BIBTEX=1
            else unset BIBTEX
            fi;;
    [dD])   if [[ "$MODE" = "PDF" ]]; then
                MODE="ASK_POSTSCRIPT"; compile $MODE
            else    
                MODE="PDF"; compile $MODE
            fi ;;
    [eE])   set_beamer_options;;
    [fF])   [[ "$file.pdf" -ot "$filename" ]] && {
                echo
                Err -w \
                "The TEX file has been modified since this PDF was created"
                sleep $SLEEP_TIME
            }
            $PDF_VIEWER $PDF_VIEWER_OPTIONS $XPDF_OPTIONS $file.pdf >& \
                /dev/null & ;;
    [iI])   if [[ $INVERSE_SEARCH ]]; then
                INVERSE_SEARCH=; edit_cmd=; echo
                info "Disabling inverse search during compilation. Restart ${DVI_VIEWER##*\/}."
                sleep $SLEEP_TIME
            elif [[ $INVERSE_SEARCH_CAPABLE ]]; then
                INVERSE_SEARCH="-src-specials"; echo
                set_xdvi
                info "Enabling inverse search during compilation.  Restart ${DVI_VIEWER##*\/}"
                [[ $DVI_VIEWER != *xdvi ]] &&\
                info "You will need to configure ${DVI_VIEWER##*\/} to use this feature"
                sleep $SLEEP_TIME
            else
                die "$answer: Invalid option!
    This option will be enabled when your $LaTeX/$PDFLaTeX is recent enough to
    accept the -src-specials argument"
            fi;;
    [lL])   if [[ -f "$file.ps" ]]; then 
                [[ "$file.ps" -ot "$filename" ]] && {
                    echo
                    Err -w \
                    "The TEX file has been modified since this PS was created"
                    sleep $SLEEP_TIME
                }
                $PS_VIEWER $PS_VIEWER_OPTIONS $file.ps 2>/dev/null &
                [[ $? -ne 0 ]] && Err "Error in launching ${PS_VIEWER##*\/}"
            else    Err "$file.ps does not exist!"
            fi ;;
    [oO])   if [[ "$MODE" = "PDF_POSTSCRIPT" ]]; then
                MODE="ASK_POSTSCRIPT"; compile $MODE
            else
                MODE="PDF_POSTSCRIPT"; compile $MODE
            fi;;
    [pP])   if [[ "$MODE" = "POSTSCRIPT" || "$MODE" = "ASK_POSTSCRIPT" ]]; then
                MODE="NO_POSTSCRIPT"; compile $MODE
            else
                MODE="POSTSCRIPT"; compile $MODE
            fi ;;
    [qQnN]) break; ;;
    [sS])   # Enable silent mode in either interactive/non-int. setup
            [[ $SILENT = *_nowarning ]] && SILENT=${SILENT/_nowarning/}
            if [[ $SILENT = *_silent ]]; then
                SILENT=${SILENT/_silent/}
            else SILENT=${SILENT}_silent
            fi ;;
    [tT])   # Interactive/non-interactive mode
            if [[ $SILENT = _no-interaction* ]]; then
                SILENT=${SILENT/_no-interaction/}
            else SILENT=_no-interaction$SILENT
            fi;;
    [wW])   # Show no warnings in (non-)interactive setup
            if [[ $SILENT = *_nowarning ]]; then
                SILENT=${SILENT/_nowarning/}
            elif [[ $SILENT ]]; then
                SILENT=${SILENT}_nowarning
            else
                die "$answer: Invalid option!
    This option is enabled when either Silent or Non-interactive mode is on"
            fi;;
    [xX])   if [[ -f "$file.dvi" ]]; then
                # dvips error messages should not mess up terminal
                [[ "$file.dvi" -ot "$filename" ]] && {
                    echo
                    Err -w \
                    "The TEX file has been modified since this DVI was created"
                    sleep $SLEEP_TIME
                }
                if [[ "$edit_cmd" ]]; then
                    # edit_cmd is nonempty if xdvi is used
                    $DVI_VIEWER $DVI_VIEWER_OPTIONS -editor "$edit_cmd" \
                        $file.dvi >& /dev/null &
                else
                    $DVI_VIEWER $DVI_VIEWER_OPTIONS $file.dvi >& /dev/null &
                fi
                [[ $? -ne 0 ]] && Err "Error in launching ${DVI_VIEWER}"
            else    Err "$file.dvi does not exist!"
            fi ;;
    "" | [yY])  compile $MODE ;;
    *)      die "$answer: Invalid Option!" ;;
    esac

done

